<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\usbhost Configuration\usbhost Configuration.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\usbhost Configuration\usbhost Configuration.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Wed Jul 15 08:05:24 2020
<BR><P>
<H3>Maximum Stack Usage =       1024 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
Task_MidiPlay &rArr; ReadMidiFile &rArr; ParseMIDI &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[396]">OS_CPU_SR_Save</a>
 <LI><a href="#[397]">OS_CPU_SR_Restore</a>
 <LI><a href="#[3b8]">OSStartHighRdy</a>
 <LI><a href="#[3d0]">OSCtxSw</a>
 <LI><a href="#[3a9]">OSIntCtxSw</a>
 <LI><a href="#[1c]">OS_CPU_PendSVHandler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[30]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[30]">ADC_IRQHandler</a><BR>
 <LI><a href="#[18]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[18]">BusFault_Handler</a><BR>
 <LI><a href="#[16]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[16]">HardFault_Handler</a><BR>
 <LI><a href="#[17]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[17]">MemManage_Handler</a><BR>
 <LI><a href="#[82]">Task_Scan</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[82]">Task_Scan</a><BR>
 <LI><a href="#[19]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">UsageFault_Handler</a><BR>
 <LI><a href="#[301]">Error_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[301]">Error_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[30]">ADC_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[18]">BusFault_Handler</a> from stm32f2xx_it.o(i.BusFault_Handler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[32]">CAN1_RX0_IRQHandler</a> from can_stm32_hal.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[33]">CAN1_RX1_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[34]">CAN1_SCE_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[31]">CAN1_TX_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[5c]">CAN2_RX0_IRQHandler</a> from can_stm32_hal.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[5d]">CAN2_RX1_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[5e]">CAN2_SCE_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[5b]">CAN2_TX_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[8d]">ConsumerHeartbeatAlarm</a> from lifegrd.o(i.ConsumerHeartbeatAlarm) referenced from lifegrd.o(i.heartbeatInit)
 <LI><a href="#[8d]">ConsumerHeartbeatAlarm</a> from lifegrd.o(i.ConsumerHeartbeatAlarm) referenced from lifegrd.o(i.proceedNODE_GUARD)
 <LI><a href="#[29]">DMA1_Stream0_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream1_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream2_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream3_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[2d]">DMA1_Stream4_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[2e]">DMA1_Stream5_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[2f]">DMA1_Stream6_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[4d]">DMA1_Stream7_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream0_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream1_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[58]">DMA2_Stream2_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[59]">DMA2_Stream3_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[5a]">DMA2_Stream4_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream5_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream6_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[62]">DMA2_Stream7_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[1b]">DebugMon_Handler</a> from stm32f2xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[ab]">DispIcoMenuDown</a> from menutop.o(i.DispIcoMenuDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[a9]">DispIcoMenuInit</a> from menutop.o(i.DispIcoMenuInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[ac]">DispIcoMenuLeft</a> from menutop.o(i.DispIcoMenuLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[ad]">DispIcoMenuRight</a> from menutop.o(i.DispIcoMenuRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[aa]">DispIcoMenuUp</a> from menutop.o(i.DispIcoMenuUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[17c]">DispMenuAboutDown</a> from setdevice.o(i.DispMenuAboutDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[180]">DispMenuAboutEscDown</a> from setdevice.o(i.DispMenuAboutEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[181]">DispMenuAboutEscOk</a> from setdevice.o(i.DispMenuAboutEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[17f]">DispMenuAboutEscUp</a> from setdevice.o(i.DispMenuAboutEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[17a]">DispMenuAboutInit</a> from setdevice.o(i.DispMenuAboutInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[17d]">DispMenuAboutLeft</a> from setdevice.o(i.DispMenuAboutLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[17e]">DispMenuAboutRight</a> from setdevice.o(i.DispMenuAboutRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[17b]">DispMenuAboutUp</a> from setdevice.o(i.DispMenuAboutUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[14c]">DispMenuBabyModeSetDown</a> from setdevice.o(i.DispMenuBabyModeSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[150]">DispMenuBabyModeSetEscDown</a> from setdevice.o(i.DispMenuBabyModeSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[151]">DispMenuBabyModeSetEscOk</a> from setdevice.o(i.DispMenuBabyModeSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[14f]">DispMenuBabyModeSetEscUp</a> from setdevice.o(i.DispMenuBabyModeSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[14a]">DispMenuBabyModeSetInit</a> from setdevice.o(i.DispMenuBabyModeSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[14d]">DispMenuBabyModeSetLeft</a> from setdevice.o(i.DispMenuBabyModeSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[14e]">DispMenuBabyModeSetRight</a> from setdevice.o(i.DispMenuBabyModeSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[14b]">DispMenuBabyModeSetUp</a> from setdevice.o(i.DispMenuBabyModeSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[184]">DispMenuCAN1DevicesTotalDown</a> from setdevice.o(i.DispMenuCAN1DevicesTotalDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[188]">DispMenuCAN1DevicesTotalEscDown</a> from setdevice.o(i.DispMenuCAN1DevicesTotalEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[189]">DispMenuCAN1DevicesTotalEscOk</a> from setdevice.o(i.DispMenuCAN1DevicesTotalEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[187]">DispMenuCAN1DevicesTotalEscUp</a> from setdevice.o(i.DispMenuCAN1DevicesTotalEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[182]">DispMenuCAN1DevicesTotalInit</a> from setdevice.o(i.DispMenuCAN1DevicesTotalInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[185]">DispMenuCAN1DevicesTotalLeft</a> from setdevice.o(i.DispMenuCAN1DevicesTotalLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[186]">DispMenuCAN1DevicesTotalRight</a> from setdevice.o(i.DispMenuCAN1DevicesTotalRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[183]">DispMenuCAN1DevicesTotalUp</a> from setdevice.o(i.DispMenuCAN1DevicesTotalUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[18c]">DispMenuCAN2DevicesTotalDown</a> from setdevice.o(i.DispMenuCAN2DevicesTotalDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[190]">DispMenuCAN2DevicesTotalEscDown</a> from setdevice.o(i.DispMenuCAN2DevicesTotalEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[191]">DispMenuCAN2DevicesTotalEscOk</a> from setdevice.o(i.DispMenuCAN2DevicesTotalEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[18f]">DispMenuCAN2DevicesTotalEscUp</a> from setdevice.o(i.DispMenuCAN2DevicesTotalEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[18a]">DispMenuCAN2DevicesTotalInit</a> from setdevice.o(i.DispMenuCAN2DevicesTotalInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[18d]">DispMenuCAN2DevicesTotalLeft</a> from setdevice.o(i.DispMenuCAN2DevicesTotalLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[18e]">DispMenuCAN2DevicesTotalRight</a> from setdevice.o(i.DispMenuCAN2DevicesTotalRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[18b]">DispMenuCAN2DevicesTotalUp</a> from setdevice.o(i.DispMenuCAN2DevicesTotalUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1d4]">DispMenuChinesePinyinSetDown</a> from setdevice.o(i.DispMenuChinesePinyinSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1d8]">DispMenuChinesePinyinSetEscDown</a> from setdevice.o(i.DispMenuChinesePinyinSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1d9]">DispMenuChinesePinyinSetEscOk</a> from setdevice.o(i.DispMenuChinesePinyinSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[1d7]">DispMenuChinesePinyinSetEscUp</a> from setdevice.o(i.DispMenuChinesePinyinSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1d2]">DispMenuChinesePinyinSetInit</a> from setdevice.o(i.DispMenuChinesePinyinSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[1d5]">DispMenuChinesePinyinSetLeft</a> from setdevice.o(i.DispMenuChinesePinyinSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[1d6]">DispMenuChinesePinyinSetRight</a> from setdevice.o(i.DispMenuChinesePinyinSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[1d3]">DispMenuChinesePinyinSetUp</a> from setdevice.o(i.DispMenuChinesePinyinSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1ec]">DispMenuChipTypeSetDown</a> from setdevice.o(i.DispMenuChipTypeSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1f0]">DispMenuChipTypeSetEscDown</a> from setdevice.o(i.DispMenuChipTypeSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1f1]">DispMenuChipTypeSetEscOk</a> from setdevice.o(i.DispMenuChipTypeSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[1ef]">DispMenuChipTypeSetEscUp</a> from setdevice.o(i.DispMenuChipTypeSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1ea]">DispMenuChipTypeSetInit</a> from setdevice.o(i.DispMenuChipTypeSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[1ed]">DispMenuChipTypeSetLeft</a> from setdevice.o(i.DispMenuChipTypeSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[1ee]">DispMenuChipTypeSetRight</a> from setdevice.o(i.DispMenuChipTypeSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[1eb]">DispMenuChipTypeSetUp</a> from setdevice.o(i.DispMenuChipTypeSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[19c]">DispMenuCleanRankingDataDown</a> from setdevice.o(i.DispMenuCleanRankingDataDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1a0]">DispMenuCleanRankingDataEscDown</a> from setdevice.o(i.DispMenuCleanRankingDataEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1a1]">DispMenuCleanRankingDataEscOk</a> from setdevice.o(i.DispMenuCleanRankingDataEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[19f]">DispMenuCleanRankingDataEscUp</a> from setdevice.o(i.DispMenuCleanRankingDataEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[19a]">DispMenuCleanRankingDataInit</a> from setdevice.o(i.DispMenuCleanRankingDataInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[19d]">DispMenuCleanRankingDataLeft</a> from setdevice.o(i.DispMenuCleanRankingDataLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[19e]">DispMenuCleanRankingDataRight</a> from setdevice.o(i.DispMenuCleanRankingDataRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[19b]">DispMenuCleanRankingDataUp</a> from setdevice.o(i.DispMenuCleanRankingDataUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[164]">DispMenuClockSetDown</a> from setdevice.o(i.DispMenuClockSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[168]">DispMenuClockSetEscDown</a> from setdevice.o(i.DispMenuClockSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[169]">DispMenuClockSetEscOk</a> from setdevice.o(i.DispMenuClockSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[167]">DispMenuClockSetEscUp</a> from setdevice.o(i.DispMenuClockSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[162]">DispMenuClockSetInit</a> from setdevice.o(i.DispMenuClockSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[165]">DispMenuClockSetLeft</a> from setdevice.o(i.DispMenuClockSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[166]">DispMenuClockSetRight</a> from setdevice.o(i.DispMenuClockSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[163]">DispMenuClockSetUp</a> from setdevice.o(i.DispMenuClockSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[224]">DispMenuColorOrderSetDown</a> from setdevice.o(i.DispMenuColorOrderSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[228]">DispMenuColorOrderSetEscDown</a> from setdevice.o(i.DispMenuColorOrderSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[229]">DispMenuColorOrderSetEscOk</a> from setdevice.o(i.DispMenuColorOrderSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[227]">DispMenuColorOrderSetEscUp</a> from setdevice.o(i.DispMenuColorOrderSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[222]">DispMenuColorOrderSetInit</a> from setdevice.o(i.DispMenuColorOrderSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[225]">DispMenuColorOrderSetLeft</a> from setdevice.o(i.DispMenuColorOrderSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[226]">DispMenuColorOrderSetRight</a> from setdevice.o(i.DispMenuColorOrderSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[223]">DispMenuColorOrderSetUp</a> from setdevice.o(i.DispMenuColorOrderSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[264]">DispMenuConfig_M_DevDown</a> from setdevice.o(i.DispMenuConfig_M_DevDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[268]">DispMenuConfig_M_DevEscDown</a> from setdevice.o(i.DispMenuConfig_M_DevEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[269]">DispMenuConfig_M_DevEscOk</a> from setdevice.o(i.DispMenuConfig_M_DevEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[267]">DispMenuConfig_M_DevEscUp</a> from setdevice.o(i.DispMenuConfig_M_DevEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[26c]">DispMenuConfig_M_DevFailDown</a> from setdevice.o(i.DispMenuConfig_M_DevFailDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[270]">DispMenuConfig_M_DevFailEscDown</a> from setdevice.o(i.DispMenuConfig_M_DevFailEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[271]">DispMenuConfig_M_DevFailEscOk</a> from setdevice.o(i.DispMenuConfig_M_DevFailEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[26f]">DispMenuConfig_M_DevFailEscUp</a> from setdevice.o(i.DispMenuConfig_M_DevFailEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[26a]">DispMenuConfig_M_DevFailInit</a> from setdevice.o(i.DispMenuConfig_M_DevFailInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[26d]">DispMenuConfig_M_DevFailLeft</a> from setdevice.o(i.DispMenuConfig_M_DevFailLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[26e]">DispMenuConfig_M_DevFailRight</a> from setdevice.o(i.DispMenuConfig_M_DevFailRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[26b]">DispMenuConfig_M_DevFailUp</a> from setdevice.o(i.DispMenuConfig_M_DevFailUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[262]">DispMenuConfig_M_DevInit</a> from setdevice.o(i.DispMenuConfig_M_DevInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[265]">DispMenuConfig_M_DevLeft</a> from setdevice.o(i.DispMenuConfig_M_DevLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[266]">DispMenuConfig_M_DevRight</a> from setdevice.o(i.DispMenuConfig_M_DevRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[263]">DispMenuConfig_M_DevUp</a> from setdevice.o(i.DispMenuConfig_M_DevUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[25c]">DispMenuConfig_S_DevDown</a> from setdevice.o(i.DispMenuConfig_S_DevDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[260]">DispMenuConfig_S_DevEscDown</a> from setdevice.o(i.DispMenuConfig_S_DevEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[261]">DispMenuConfig_S_DevEscOk</a> from setdevice.o(i.DispMenuConfig_S_DevEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[25f]">DispMenuConfig_S_DevEscUp</a> from setdevice.o(i.DispMenuConfig_S_DevEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[25a]">DispMenuConfig_S_DevInit</a> from setdevice.o(i.DispMenuConfig_S_DevInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[25d]">DispMenuConfig_S_DevLeft</a> from setdevice.o(i.DispMenuConfig_S_DevLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[25e]">DispMenuConfig_S_DevRight</a> from setdevice.o(i.DispMenuConfig_S_DevRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[25b]">DispMenuConfig_S_DevUp</a> from setdevice.o(i.DispMenuConfig_S_DevUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[21c]">DispMenuControlAddrSetDown</a> from setdevice.o(i.DispMenuControlAddrSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[220]">DispMenuControlAddrSetEscDown</a> from setdevice.o(i.DispMenuControlAddrSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[221]">DispMenuControlAddrSetEscOk</a> from setdevice.o(i.DispMenuControlAddrSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[21f]">DispMenuControlAddrSetEscUp</a> from setdevice.o(i.DispMenuControlAddrSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[21a]">DispMenuControlAddrSetInit</a> from setdevice.o(i.DispMenuControlAddrSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[21d]">DispMenuControlAddrSetLeft</a> from setdevice.o(i.DispMenuControlAddrSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[21e]">DispMenuControlAddrSetRight</a> from setdevice.o(i.DispMenuControlAddrSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[21b]">DispMenuControlAddrSetUp</a> from setdevice.o(i.DispMenuControlAddrSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[174]">DispMenuDateSetDown</a> from setdevice.o(i.DispMenuDateSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[178]">DispMenuDateSetEscDown</a> from setdevice.o(i.DispMenuDateSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[179]">DispMenuDateSetEscOk</a> from setdevice.o(i.DispMenuDateSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[177]">DispMenuDateSetEscUp</a> from setdevice.o(i.DispMenuDateSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[172]">DispMenuDateSetInit</a> from setdevice.o(i.DispMenuDateSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[175]">DispMenuDateSetLeft</a> from setdevice.o(i.DispMenuDateSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[176]">DispMenuDateSetRight</a> from setdevice.o(i.DispMenuDateSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[173]">DispMenuDateSetUp</a> from setdevice.o(i.DispMenuDateSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1cc]">DispMenuEnglishCharSetDown</a> from setdevice.o(i.DispMenuEnglishCharSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1d0]">DispMenuEnglishCharSetEscDown</a> from setdevice.o(i.DispMenuEnglishCharSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1d1]">DispMenuEnglishCharSetEscOk</a> from setdevice.o(i.DispMenuEnglishCharSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[1cf]">DispMenuEnglishCharSetEscUp</a> from setdevice.o(i.DispMenuEnglishCharSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1ca]">DispMenuEnglishCharSetInit</a> from setdevice.o(i.DispMenuEnglishCharSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[1cd]">DispMenuEnglishCharSetLeft</a> from setdevice.o(i.DispMenuEnglishCharSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[1ce]">DispMenuEnglishCharSetRight</a> from setdevice.o(i.DispMenuEnglishCharSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[1cb]">DispMenuEnglishCharSetUp</a> from setdevice.o(i.DispMenuEnglishCharSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[e4]">DispMenuFactorySetDown</a> from setdevice.o(i.DispMenuFactorySetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[e8]">DispMenuFactorySetEscDown</a> from setdevice.o(i.DispMenuFactorySetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[e9]">DispMenuFactorySetEscOk</a> from setdevice.o(i.DispMenuFactorySetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[e7]">DispMenuFactorySetEscUp</a> from setdevice.o(i.DispMenuFactorySetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[e2]">DispMenuFactorySetInit</a> from setdevice.o(i.DispMenuFactorySetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[e5]">DispMenuFactorySetLeft</a> from setdevice.o(i.DispMenuFactorySetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[e6]">DispMenuFactorySetRight</a> from setdevice.o(i.DispMenuFactorySetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[e3]">DispMenuFactorySetUp</a> from setdevice.o(i.DispMenuFactorySetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1fc]">DispMenuFullColorLightPatternSetDown</a> from setdevice.o(i.DispMenuFullColorLightPatternSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[200]">DispMenuFullColorLightPatternSetEscDown</a> from setdevice.o(i.DispMenuFullColorLightPatternSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[201]">DispMenuFullColorLightPatternSetEscOk</a> from setdevice.o(i.DispMenuFullColorLightPatternSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[1ff]">DispMenuFullColorLightPatternSetEscUp</a> from setdevice.o(i.DispMenuFullColorLightPatternSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1fa]">DispMenuFullColorLightPatternSetInit</a> from setdevice.o(i.DispMenuFullColorLightPatternSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[1fd]">DispMenuFullColorLightPatternSetLeft</a> from setdevice.o(i.DispMenuFullColorLightPatternSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[1fe]">DispMenuFullColorLightPatternSetRight</a> from setdevice.o(i.DispMenuFullColorLightPatternSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[1fb]">DispMenuFullColorLightPatternSetUp</a> from setdevice.o(i.DispMenuFullColorLightPatternSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1e4]">DispMenuFullColorLightSetDown</a> from setdevice.o(i.DispMenuFullColorLightSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1e8]">DispMenuFullColorLightSetEscDown</a> from setdevice.o(i.DispMenuFullColorLightSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1e9]">DispMenuFullColorLightSetEscOk</a> from setdevice.o(i.DispMenuFullColorLightSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[1e7]">DispMenuFullColorLightSetEscUp</a> from setdevice.o(i.DispMenuFullColorLightSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1e2]">DispMenuFullColorLightSetInit</a> from setdevice.o(i.DispMenuFullColorLightSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[1e5]">DispMenuFullColorLightSetLeft</a> from setdevice.o(i.DispMenuFullColorLightSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[1e6]">DispMenuFullColorLightSetRight</a> from setdevice.o(i.DispMenuFullColorLightSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[1e3]">DispMenuFullColorLightSetUp</a> from setdevice.o(i.DispMenuFullColorLightSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[b0]">DispMenuFuncDown</a> from menufunc.o(i.DispMenuFuncDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[ae]">DispMenuFuncInit</a> from menufunc.o(i.DispMenuFuncInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[b1]">DispMenuFuncLeft</a> from menufunc.o(i.DispMenuFuncLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[b2]">DispMenuFuncRight</a> from menufunc.o(i.DispMenuFuncRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[af]">DispMenuFuncUp</a> from menufunc.o(i.DispMenuFuncUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[13c]">DispMenuGameModeSelectDown</a> from setdevice.o(i.DispMenuGameModeSelectDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[140]">DispMenuGameModeSelectEscDown</a> from setdevice.o(i.DispMenuGameModeSelectEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[141]">DispMenuGameModeSelectEscOk</a> from setdevice.o(i.DispMenuGameModeSelectEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[13f]">DispMenuGameModeSelectEscUp</a> from setdevice.o(i.DispMenuGameModeSelectEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[13a]">DispMenuGameModeSelectInit</a> from setdevice.o(i.DispMenuGameModeSelectInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[13d]">DispMenuGameModeSelectLeft</a> from setdevice.o(i.DispMenuGameModeSelectLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[13e]">DispMenuGameModeSelectRight</a> from setdevice.o(i.DispMenuGameModeSelectRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[13b]">DispMenuGameModeSelectUp</a> from setdevice.o(i.DispMenuGameModeSelectUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[144]">DispMenuGameModeSetDown</a> from setdevice.o(i.DispMenuGameModeSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[148]">DispMenuGameModeSetEscDown</a> from setdevice.o(i.DispMenuGameModeSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[149]">DispMenuGameModeSetEscOk</a> from setdevice.o(i.DispMenuGameModeSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[147]">DispMenuGameModeSetEscUp</a> from setdevice.o(i.DispMenuGameModeSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[142]">DispMenuGameModeSetInit</a> from setdevice.o(i.DispMenuGameModeSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[145]">DispMenuGameModeSetLeft</a> from setdevice.o(i.DispMenuGameModeSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[146]">DispMenuGameModeSetRight</a> from setdevice.o(i.DispMenuGameModeSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[143]">DispMenuGameModeSetUp</a> from setdevice.o(i.DispMenuGameModeSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[194]">DispMenuGameSelectDown</a> from setdevice.o(i.DispMenuGameSelectDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[198]">DispMenuGameSelectEscDown</a> from setdevice.o(i.DispMenuGameSelectEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[199]">DispMenuGameSelectEscOk</a> from setdevice.o(i.DispMenuGameSelectEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[197]">DispMenuGameSelectEscUp</a> from setdevice.o(i.DispMenuGameSelectEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[192]">DispMenuGameSelectInit</a> from setdevice.o(i.DispMenuGameSelectInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[195]">DispMenuGameSelectLeft</a> from setdevice.o(i.DispMenuGameSelectLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[196]">DispMenuGameSelectRight</a> from setdevice.o(i.DispMenuGameSelectRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[193]">DispMenuGameSelectUp</a> from setdevice.o(i.DispMenuGameSelectUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[20c]">DispMenuGroupsLedNumberSetDown</a> from setdevice.o(i.DispMenuGroupsLedNumberSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[210]">DispMenuGroupsLedNumberSetEscDown</a> from setdevice.o(i.DispMenuGroupsLedNumberSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[211]">DispMenuGroupsLedNumberSetEscOk</a> from setdevice.o(i.DispMenuGroupsLedNumberSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[20f]">DispMenuGroupsLedNumberSetEscUp</a> from setdevice.o(i.DispMenuGroupsLedNumberSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[20a]">DispMenuGroupsLedNumberSetInit</a> from setdevice.o(i.DispMenuGroupsLedNumberSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[20d]">DispMenuGroupsLedNumberSetLeft</a> from setdevice.o(i.DispMenuGroupsLedNumberSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[20e]">DispMenuGroupsLedNumberSetRight</a> from setdevice.o(i.DispMenuGroupsLedNumberSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[20b]">DispMenuGroupsLedNumberSetUp</a> from setdevice.o(i.DispMenuGroupsLedNumberSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[ba]">DispMenuLanguageDown</a> from menulanguage.o(i.DispMenuLanguageDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[b8]">DispMenuLanguageInit</a> from menulanguage.o(i.DispMenuLanguageInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[bb]">DispMenuLanguageLeft</a> from menulanguage.o(i.DispMenuLanguageLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[bc]">DispMenuLanguageRight</a> from menulanguage.o(i.DispMenuLanguageRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[b9]">DispMenuLanguageUp</a> from menulanguage.o(i.DispMenuLanguageUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[274]">DispMenuLedColorCycleModeSetDown</a> from setdevice.o(i.DispMenuLedColorCycleModeSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[278]">DispMenuLedColorCycleModeSetEscDown</a> from setdevice.o(i.DispMenuLedColorCycleModeSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[279]">DispMenuLedColorCycleModeSetEscOk</a> from setdevice.o(i.DispMenuLedColorCycleModeSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[277]">DispMenuLedColorCycleModeSetEscUp</a> from setdevice.o(i.DispMenuLedColorCycleModeSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[272]">DispMenuLedColorCycleModeSetInit</a> from setdevice.o(i.DispMenuLedColorCycleModeSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[275]">DispMenuLedColorCycleModeSetLeft</a> from setdevice.o(i.DispMenuLedColorCycleModeSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[276]">DispMenuLedColorCycleModeSetRight</a> from setdevice.o(i.DispMenuLedColorCycleModeSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[273]">DispMenuLedColorCycleModeSetUp</a> from setdevice.o(i.DispMenuLedColorCycleModeSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[22c]">DispMenuLedColorCycleTimeSetDown</a> from setdevice.o(i.DispMenuLedColorCycleTimeSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[230]">DispMenuLedColorCycleTimeSetEscDown</a> from setdevice.o(i.DispMenuLedColorCycleTimeSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[231]">DispMenuLedColorCycleTimeSetEscOk</a> from setdevice.o(i.DispMenuLedColorCycleTimeSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[22f]">DispMenuLedColorCycleTimeSetEscUp</a> from setdevice.o(i.DispMenuLedColorCycleTimeSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[22a]">DispMenuLedColorCycleTimeSetInit</a> from setdevice.o(i.DispMenuLedColorCycleTimeSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[22d]">DispMenuLedColorCycleTimeSetLeft</a> from setdevice.o(i.DispMenuLedColorCycleTimeSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[22e]">DispMenuLedColorCycleTimeSetRight</a> from setdevice.o(i.DispMenuLedColorCycleTimeSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[22b]">DispMenuLedColorCycleTimeSetUp</a> from setdevice.o(i.DispMenuLedColorCycleTimeSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[214]">DispMenuLedColourSetDown</a> from setdevice.o(i.DispMenuLedColourSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[218]">DispMenuLedColourSetEscDown</a> from setdevice.o(i.DispMenuLedColourSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[219]">DispMenuLedColourSetEscOk</a> from setdevice.o(i.DispMenuLedColourSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[217]">DispMenuLedColourSetEscUp</a> from setdevice.o(i.DispMenuLedColourSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[212]">DispMenuLedColourSetInit</a> from setdevice.o(i.DispMenuLedColourSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[215]">DispMenuLedColourSetLeft</a> from setdevice.o(i.DispMenuLedColourSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[216]">DispMenuLedColourSetRight</a> from setdevice.o(i.DispMenuLedColourSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[213]">DispMenuLedColourSetUp</a> from setdevice.o(i.DispMenuLedColourSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[234]">DispMenuLedControlSetDown</a> from setdevice.o(i.DispMenuLedControlSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[238]">DispMenuLedControlSetEscDown</a> from setdevice.o(i.DispMenuLedControlSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[239]">DispMenuLedControlSetEscOk</a> from setdevice.o(i.DispMenuLedControlSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[237]">DispMenuLedControlSetEscUp</a> from setdevice.o(i.DispMenuLedControlSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[232]">DispMenuLedControlSetInit</a> from setdevice.o(i.DispMenuLedControlSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[235]">DispMenuLedControlSetLeft</a> from setdevice.o(i.DispMenuLedControlSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[236]">DispMenuLedControlSetRight</a> from setdevice.o(i.DispMenuLedControlSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[233]">DispMenuLedControlSetUp</a> from setdevice.o(i.DispMenuLedControlSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[124]">DispMenuLightsModeSetDown</a> from setdevice.o(i.DispMenuLightsModeSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[128]">DispMenuLightsModeSetEscDown</a> from setdevice.o(i.DispMenuLightsModeSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[129]">DispMenuLightsModeSetEscOk</a> from setdevice.o(i.DispMenuLightsModeSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[127]">DispMenuLightsModeSetEscUp</a> from setdevice.o(i.DispMenuLightsModeSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[122]">DispMenuLightsModeSetInit</a> from setdevice.o(i.DispMenuLightsModeSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[125]">DispMenuLightsModeSetLeft</a> from setdevice.o(i.DispMenuLightsModeSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[126]">DispMenuLightsModeSetRight</a> from setdevice.o(i.DispMenuLightsModeSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[123]">DispMenuLightsModeSetUp</a> from setdevice.o(i.DispMenuLightsModeSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[134]">DispMenuLightsSpacingSetDown</a> from setdevice.o(i.DispMenuLightsSpacingSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[138]">DispMenuLightsSpacingSetEscDown</a> from setdevice.o(i.DispMenuLightsSpacingSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[139]">DispMenuLightsSpacingSetEscOk</a> from setdevice.o(i.DispMenuLightsSpacingSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[137]">DispMenuLightsSpacingSetEscUp</a> from setdevice.o(i.DispMenuLightsSpacingSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[132]">DispMenuLightsSpacingSetInit</a> from setdevice.o(i.DispMenuLightsSpacingSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[135]">DispMenuLightsSpacingSetLeft</a> from setdevice.o(i.DispMenuLightsSpacingSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[136]">DispMenuLightsSpacingSetRight</a> from setdevice.o(i.DispMenuLightsSpacingSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[133]">DispMenuLightsSpacingSetUp</a> from setdevice.o(i.DispMenuLightsSpacingSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[12c]">DispMenuLightsSpeedSetDown</a> from setdevice.o(i.DispMenuLightsSpeedSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[130]">DispMenuLightsSpeedSetEscDown</a> from setdevice.o(i.DispMenuLightsSpeedSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[131]">DispMenuLightsSpeedSetEscOk</a> from setdevice.o(i.DispMenuLightsSpeedSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[12f]">DispMenuLightsSpeedSetEscUp</a> from setdevice.o(i.DispMenuLightsSpeedSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[12a]">DispMenuLightsSpeedSetInit</a> from setdevice.o(i.DispMenuLightsSpeedSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[12d]">DispMenuLightsSpeedSetLeft</a> from setdevice.o(i.DispMenuLightsSpeedSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[12e]">DispMenuLightsSpeedSetRight</a> from setdevice.o(i.DispMenuLightsSpeedSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[12b]">DispMenuLightsSpeedSetUp</a> from setdevice.o(i.DispMenuLightsSpeedSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[dc]">DispMenuLightsStatusSetDown</a> from setdevice.o(i.DispMenuLightsStatusSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[e0]">DispMenuLightsStatusSetEscDown</a> from setdevice.o(i.DispMenuLightsStatusSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[e1]">DispMenuLightsStatusSetEscOk</a> from setdevice.o(i.DispMenuLightsStatusSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[df]">DispMenuLightsStatusSetEscUp</a> from setdevice.o(i.DispMenuLightsStatusSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[da]">DispMenuLightsStatusSetInit</a> from setdevice.o(i.DispMenuLightsStatusSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[dd]">DispMenuLightsStatusSetLeft</a> from setdevice.o(i.DispMenuLightsStatusSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[de]">DispMenuLightsStatusSetRight</a> from setdevice.o(i.DispMenuLightsStatusSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[db]">DispMenuLightsStatusSetUp</a> from setdevice.o(i.DispMenuLightsStatusSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[23c]">DispMenuLocal_OnOffDown</a> from setdevice.o(i.DispMenuLocal_OnOffDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[240]">DispMenuLocal_OnOffEscDown</a> from setdevice.o(i.DispMenuLocal_OnOffEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[241]">DispMenuLocal_OnOffEscOk</a> from setdevice.o(i.DispMenuLocal_OnOffEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[23f]">DispMenuLocal_OnOffEscUp</a> from setdevice.o(i.DispMenuLocal_OnOffEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[23a]">DispMenuLocal_OnOffInit</a> from setdevice.o(i.DispMenuLocal_OnOffInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[23d]">DispMenuLocal_OnOffLeft</a> from setdevice.o(i.DispMenuLocal_OnOffLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[23e]">DispMenuLocal_OnOffRight</a> from setdevice.o(i.DispMenuLocal_OnOffRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[23b]">DispMenuLocal_OnOffUp</a> from setdevice.o(i.DispMenuLocal_OnOffUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[24c]">DispMenuLocal_TimerDown</a> from setdevice.o(i.DispMenuLocal_TimerDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[250]">DispMenuLocal_TimerEscDown</a> from setdevice.o(i.DispMenuLocal_TimerEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[251]">DispMenuLocal_TimerEscOk</a> from setdevice.o(i.DispMenuLocal_TimerEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[24f]">DispMenuLocal_TimerEscUp</a> from setdevice.o(i.DispMenuLocal_TimerEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[24a]">DispMenuLocal_TimerInit</a> from setdevice.o(i.DispMenuLocal_TimerInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[24d]">DispMenuLocal_TimerLeft</a> from setdevice.o(i.DispMenuLocal_TimerLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[24e]">DispMenuLocal_TimerRight</a> from setdevice.o(i.DispMenuLocal_TimerRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[24b]">DispMenuLocal_TimerUp</a> from setdevice.o(i.DispMenuLocal_TimerUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[204]">DispMenuMaxLedNumberSetDown</a> from setdevice.o(i.DispMenuMaxLedNumberSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[208]">DispMenuMaxLedNumberSetEscDown</a> from setdevice.o(i.DispMenuMaxLedNumberSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[209]">DispMenuMaxLedNumberSetEscOk</a> from setdevice.o(i.DispMenuMaxLedNumberSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[207]">DispMenuMaxLedNumberSetEscUp</a> from setdevice.o(i.DispMenuMaxLedNumberSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[202]">DispMenuMaxLedNumberSetInit</a> from setdevice.o(i.DispMenuMaxLedNumberSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[205]">DispMenuMaxLedNumberSetLeft</a> from setdevice.o(i.DispMenuMaxLedNumberSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[206]">DispMenuMaxLedNumberSetRight</a> from setdevice.o(i.DispMenuMaxLedNumberSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[203]">DispMenuMaxLedNumberSetUp</a> from setdevice.o(i.DispMenuMaxLedNumberSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[bf]">DispMenuMeasureDown</a> from menumeasure.o(i.DispMenuMeasureDown) referenced 2 times from menufsm.o(.constdata)
 <LI><a href="#[bd]">DispMenuMeasureInit</a> from menumeasure.o(i.DispMenuMeasureInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[c0]">DispMenuMeasureLeft</a> from menumeasure.o(i.DispMenuMeasureLeft) referenced 2 times from menufsm.o(.constdata)
 <LI><a href="#[c1]">DispMenuMeasureRight</a> from menumeasure.o(i.DispMenuMeasureRight) referenced 2 times from menufsm.o(.constdata)
 <LI><a href="#[be]">DispMenuMeasureUp</a> from menumeasure.o(i.DispMenuMeasureUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[d4]">DispMenuMusicStatusSetDown</a> from setdevice.o(i.DispMenuMusicStatusSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[d8]">DispMenuMusicStatusSetEscDown</a> from setdevice.o(i.DispMenuMusicStatusSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[d9]">DispMenuMusicStatusSetEscOk</a> from setdevice.o(i.DispMenuMusicStatusSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[d7]">DispMenuMusicStatusSetEscUp</a> from setdevice.o(i.DispMenuMusicStatusSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[d2]">DispMenuMusicStatusSetInit</a> from setdevice.o(i.DispMenuMusicStatusSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[d5]">DispMenuMusicStatusSetLeft</a> from setdevice.o(i.DispMenuMusicStatusSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[d6]">DispMenuMusicStatusSetRight</a> from setdevice.o(i.DispMenuMusicStatusSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[d3]">DispMenuMusicStatusSetUp</a> from setdevice.o(i.DispMenuMusicStatusSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1f4]">DispMenuNumberOfFramesSetDown</a> from setdevice.o(i.DispMenuNumberOfFramesSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1f8]">DispMenuNumberOfFramesSetEscDown</a> from setdevice.o(i.DispMenuNumberOfFramesSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1f9]">DispMenuNumberOfFramesSetEscOk</a> from setdevice.o(i.DispMenuNumberOfFramesSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[1f7]">DispMenuNumberOfFramesSetEscUp</a> from setdevice.o(i.DispMenuNumberOfFramesSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1f2]">DispMenuNumberOfFramesSetInit</a> from setdevice.o(i.DispMenuNumberOfFramesSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[1f5]">DispMenuNumberOfFramesSetLeft</a> from setdevice.o(i.DispMenuNumberOfFramesSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[1f6]">DispMenuNumberOfFramesSetRight</a> from setdevice.o(i.DispMenuNumberOfFramesSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[1f3]">DispMenuNumberOfFramesSetUp</a> from setdevice.o(i.DispMenuNumberOfFramesSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[b5]">DispMenuParaDown</a> from menupara.o(i.DispMenuParaDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[b3]">DispMenuParaInit</a> from menupara.o(i.DispMenuParaInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[b6]">DispMenuParaLeft</a> from menupara.o(i.DispMenuParaLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[b7]">DispMenuParaRight</a> from menupara.o(i.DispMenuParaRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[b4]">DispMenuParaUp</a> from menupara.o(i.DispMenuParaUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[154]">DispMenuRowNumberSetDown</a> from setdevice.o(i.DispMenuRowNumberSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[158]">DispMenuRowNumberSetEscDown</a> from setdevice.o(i.DispMenuRowNumberSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[159]">DispMenuRowNumberSetEscOk</a> from setdevice.o(i.DispMenuRowNumberSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[157]">DispMenuRowNumberSetEscUp</a> from setdevice.o(i.DispMenuRowNumberSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[152]">DispMenuRowNumberSetInit</a> from setdevice.o(i.DispMenuRowNumberSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[155]">DispMenuRowNumberSetLeft</a> from setdevice.o(i.DispMenuRowNumberSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[156]">DispMenuRowNumberSetRight</a> from setdevice.o(i.DispMenuRowNumberSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[153]">DispMenuRowNumberSetUp</a> from setdevice.o(i.DispMenuRowNumberSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[15c]">DispMenuRowsDeviceNumberSetDown</a> from setdevice.o(i.DispMenuRowsDeviceNumberSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[160]">DispMenuRowsDeviceNumberSetEscDown</a> from setdevice.o(i.DispMenuRowsDeviceNumberSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[161]">DispMenuRowsDeviceNumberSetEscOk</a> from setdevice.o(i.DispMenuRowsDeviceNumberSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[15f]">DispMenuRowsDeviceNumberSetEscUp</a> from setdevice.o(i.DispMenuRowsDeviceNumberSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[15a]">DispMenuRowsDeviceNumberSetInit</a> from setdevice.o(i.DispMenuRowsDeviceNumberSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[15d]">DispMenuRowsDeviceNumberSetLeft</a> from setdevice.o(i.DispMenuRowsDeviceNumberSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[15e]">DispMenuRowsDeviceNumberSetRight</a> from setdevice.o(i.DispMenuRowsDeviceNumberSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[15b]">DispMenuRowsDeviceNumberSetUp</a> from setdevice.o(i.DispMenuRowsDeviceNumberSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1bc]">DispMenuSayModeSelectDown</a> from setdevice.o(i.DispMenuSayModeSelectDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1c0]">DispMenuSayModeSelectEscDown</a> from setdevice.o(i.DispMenuSayModeSelectEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1c1]">DispMenuSayModeSelectEscOk</a> from setdevice.o(i.DispMenuSayModeSelectEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[1bf]">DispMenuSayModeSelectEscUp</a> from setdevice.o(i.DispMenuSayModeSelectEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1ba]">DispMenuSayModeSelectInit</a> from setdevice.o(i.DispMenuSayModeSelectInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[1bd]">DispMenuSayModeSelectLeft</a> from setdevice.o(i.DispMenuSayModeSelectLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[1be]">DispMenuSayModeSelectRight</a> from setdevice.o(i.DispMenuSayModeSelectRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[1bb]">DispMenuSayModeSelectUp</a> from setdevice.o(i.DispMenuSayModeSelectUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1c4]">DispMenuSayModeSetDown</a> from setdevice.o(i.DispMenuSayModeSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1c8]">DispMenuSayModeSetEscDown</a> from setdevice.o(i.DispMenuSayModeSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1c9]">DispMenuSayModeSetEscOk</a> from setdevice.o(i.DispMenuSayModeSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[1c7]">DispMenuSayModeSetEscUp</a> from setdevice.o(i.DispMenuSayModeSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1c2]">DispMenuSayModeSetInit</a> from setdevice.o(i.DispMenuSayModeSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[1c5]">DispMenuSayModeSetLeft</a> from setdevice.o(i.DispMenuSayModeSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[1c6]">DispMenuSayModeSetRight</a> from setdevice.o(i.DispMenuSayModeSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[1c3]">DispMenuSayModeSetUp</a> from setdevice.o(i.DispMenuSayModeSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1a4]">DispMenuSetBeepRowNumDown</a> from setdevice.o(i.DispMenuSetBeepRowNumDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1a8]">DispMenuSetBeepRowNumEscDown</a> from setdevice.o(i.DispMenuSetBeepRowNumEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1a9]">DispMenuSetBeepRowNumEscOk</a> from setdevice.o(i.DispMenuSetBeepRowNumEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[1a7]">DispMenuSetBeepRowNumEscUp</a> from setdevice.o(i.DispMenuSetBeepRowNumEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1a2]">DispMenuSetBeepRowNumInit</a> from setdevice.o(i.DispMenuSetBeepRowNumInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[1a5]">DispMenuSetBeepRowNumLeft</a> from setdevice.o(i.DispMenuSetBeepRowNumLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[1a6]">DispMenuSetBeepRowNumRight</a> from setdevice.o(i.DispMenuSetBeepRowNumRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[1a3]">DispMenuSetBeepRowNumUp</a> from setdevice.o(i.DispMenuSetBeepRowNumUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[c4]">DispMenuSetDeviceAddressDown</a> from setdevice.o(i.DispMenuSetDeviceAddressDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[c8]">DispMenuSetDeviceAddressEscDown</a> from setdevice.o(i.DispMenuSetDeviceAddressEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[c9]">DispMenuSetDeviceAddressEscOk</a> from setdevice.o(i.DispMenuSetDeviceAddressEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[c7]">DispMenuSetDeviceAddressEscUp</a> from setdevice.o(i.DispMenuSetDeviceAddressEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[c2]">DispMenuSetDeviceAddressInit</a> from setdevice.o(i.DispMenuSetDeviceAddressInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[c5]">DispMenuSetDeviceAddressLeft</a> from setdevice.o(i.DispMenuSetDeviceAddressLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[c6]">DispMenuSetDeviceAddressRight</a> from setdevice.o(i.DispMenuSetDeviceAddressRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[c3]">DispMenuSetDeviceAddressUp</a> from setdevice.o(i.DispMenuSetDeviceAddressUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[cc]">DispMenuSetDeviceTotalDown</a> from setdevice.o(i.DispMenuSetDeviceTotalDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[d0]">DispMenuSetDeviceTotalEscDown</a> from setdevice.o(i.DispMenuSetDeviceTotalEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[d1]">DispMenuSetDeviceTotalEscOk</a> from setdevice.o(i.DispMenuSetDeviceTotalEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[cf]">DispMenuSetDeviceTotalEscUp</a> from setdevice.o(i.DispMenuSetDeviceTotalEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[ca]">DispMenuSetDeviceTotalInit</a> from setdevice.o(i.DispMenuSetDeviceTotalInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[cd]">DispMenuSetDeviceTotalLeft</a> from setdevice.o(i.DispMenuSetDeviceTotalLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[ce]">DispMenuSetDeviceTotalRight</a> from setdevice.o(i.DispMenuSetDeviceTotalRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[cb]">DispMenuSetDeviceTotalUp</a> from setdevice.o(i.DispMenuSetDeviceTotalUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1ac]">DispMenuSetGamePassTimeDown</a> from setdevice.o(i.DispMenuSetGamePassTimeDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1b0]">DispMenuSetGamePassTimeEscDown</a> from setdevice.o(i.DispMenuSetGamePassTimeEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1b1]">DispMenuSetGamePassTimeEscOk</a> from setdevice.o(i.DispMenuSetGamePassTimeEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[1af]">DispMenuSetGamePassTimeEscUp</a> from setdevice.o(i.DispMenuSetGamePassTimeEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1aa]">DispMenuSetGamePassTimeInit</a> from setdevice.o(i.DispMenuSetGamePassTimeInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[1ad]">DispMenuSetGamePassTimeLeft</a> from setdevice.o(i.DispMenuSetGamePassTimeLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[1ae]">DispMenuSetGamePassTimeRight</a> from setdevice.o(i.DispMenuSetGamePassTimeRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[1ab]">DispMenuSetGamePassTimeUp</a> from setdevice.o(i.DispMenuSetGamePassTimeUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[f4]">DispMenuSetLightsDelayTimeDown</a> from setdevice.o(i.DispMenuSetLightsDelayTimeDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[f8]">DispMenuSetLightsDelayTimeEscDown</a> from setdevice.o(i.DispMenuSetLightsDelayTimeEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[f9]">DispMenuSetLightsDelayTimeEscOk</a> from setdevice.o(i.DispMenuSetLightsDelayTimeEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[f7]">DispMenuSetLightsDelayTimeEscUp</a> from setdevice.o(i.DispMenuSetLightsDelayTimeEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[f2]">DispMenuSetLightsDelayTimeInit</a> from setdevice.o(i.DispMenuSetLightsDelayTimeInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[f5]">DispMenuSetLightsDelayTimeLeft</a> from setdevice.o(i.DispMenuSetLightsDelayTimeLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[f6]">DispMenuSetLightsDelayTimeRight</a> from setdevice.o(i.DispMenuSetLightsDelayTimeRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[f3]">DispMenuSetLightsDelayTimeUp</a> from setdevice.o(i.DispMenuSetLightsDelayTimeUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[ec]">DispMenuSetMusicDelayTimeDown</a> from setdevice.o(i.DispMenuSetMusicDelayTimeDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[f0]">DispMenuSetMusicDelayTimeEscDown</a> from setdevice.o(i.DispMenuSetMusicDelayTimeEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[f1]">DispMenuSetMusicDelayTimeEscOk</a> from setdevice.o(i.DispMenuSetMusicDelayTimeEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[ef]">DispMenuSetMusicDelayTimeEscUp</a> from setdevice.o(i.DispMenuSetMusicDelayTimeEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[ea]">DispMenuSetMusicDelayTimeInit</a> from setdevice.o(i.DispMenuSetMusicDelayTimeInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[ed]">DispMenuSetMusicDelayTimeLeft</a> from setdevice.o(i.DispMenuSetMusicDelayTimeLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[ee]">DispMenuSetMusicDelayTimeRight</a> from setdevice.o(i.DispMenuSetMusicDelayTimeRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[eb]">DispMenuSetMusicDelayTimeUp</a> from setdevice.o(i.DispMenuSetMusicDelayTimeUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[11c]">DispMenuSetNoteDelayTimeDown</a> from setdevice.o(i.DispMenuSetNoteDelayTimeDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[120]">DispMenuSetNoteDelayTimeEscDown</a> from setdevice.o(i.DispMenuSetNoteDelayTimeEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[121]">DispMenuSetNoteDelayTimeEscOk</a> from setdevice.o(i.DispMenuSetNoteDelayTimeEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[11f]">DispMenuSetNoteDelayTimeEscUp</a> from setdevice.o(i.DispMenuSetNoteDelayTimeEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[11a]">DispMenuSetNoteDelayTimeInit</a> from setdevice.o(i.DispMenuSetNoteDelayTimeInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[11d]">DispMenuSetNoteDelayTimeLeft</a> from setdevice.o(i.DispMenuSetNoteDelayTimeLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[11e]">DispMenuSetNoteDelayTimeRight</a> from setdevice.o(i.DispMenuSetNoteDelayTimeRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[11b]">DispMenuSetNoteDelayTimeUp</a> from setdevice.o(i.DispMenuSetNoteDelayTimeUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1dc]">DispMenuSetReturnTopTimeDown</a> from setdevice.o(i.DispMenuSetReturnTopTimeDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1e0]">DispMenuSetReturnTopTimeEscDown</a> from setdevice.o(i.DispMenuSetReturnTopTimeEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1e1]">DispMenuSetReturnTopTimeEscOk</a> from setdevice.o(i.DispMenuSetReturnTopTimeEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[1df]">DispMenuSetReturnTopTimeEscUp</a> from setdevice.o(i.DispMenuSetReturnTopTimeEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1da]">DispMenuSetReturnTopTimeInit</a> from setdevice.o(i.DispMenuSetReturnTopTimeInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[1dd]">DispMenuSetReturnTopTimeLeft</a> from setdevice.o(i.DispMenuSetReturnTopTimeLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[1de]">DispMenuSetReturnTopTimeRight</a> from setdevice.o(i.DispMenuSetReturnTopTimeRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[1db]">DispMenuSetReturnTopTimeUp</a> from setdevice.o(i.DispMenuSetReturnTopTimeUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[114]">DispMenuSetSyllableDelayTimeDown</a> from setdevice.o(i.DispMenuSetSyllableDelayTimeDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[118]">DispMenuSetSyllableDelayTimeEscDown</a> from setdevice.o(i.DispMenuSetSyllableDelayTimeEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[119]">DispMenuSetSyllableDelayTimeEscOk</a> from setdevice.o(i.DispMenuSetSyllableDelayTimeEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[117]">DispMenuSetSyllableDelayTimeEscUp</a> from setdevice.o(i.DispMenuSetSyllableDelayTimeEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[112]">DispMenuSetSyllableDelayTimeInit</a> from setdevice.o(i.DispMenuSetSyllableDelayTimeInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[115]">DispMenuSetSyllableDelayTimeLeft</a> from setdevice.o(i.DispMenuSetSyllableDelayTimeLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[116]">DispMenuSetSyllableDelayTimeRight</a> from setdevice.o(i.DispMenuSetSyllableDelayTimeRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[113]">DispMenuSetSyllableDelayTimeUp</a> from setdevice.o(i.DispMenuSetSyllableDelayTimeUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[fc]">DispMenuSetTrampleCountTimeDown</a> from setdevice.o(i.DispMenuSetTrampleCountTimeDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[100]">DispMenuSetTrampleCountTimeEscDown</a> from setdevice.o(i.DispMenuSetTrampleCountTimeEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[101]">DispMenuSetTrampleCountTimeEscOk</a> from setdevice.o(i.DispMenuSetTrampleCountTimeEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[ff]">DispMenuSetTrampleCountTimeEscUp</a> from setdevice.o(i.DispMenuSetTrampleCountTimeEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[fa]">DispMenuSetTrampleCountTimeInit</a> from setdevice.o(i.DispMenuSetTrampleCountTimeInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[fd]">DispMenuSetTrampleCountTimeLeft</a> from setdevice.o(i.DispMenuSetTrampleCountTimeLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[fe]">DispMenuSetTrampleCountTimeRight</a> from setdevice.o(i.DispMenuSetTrampleCountTimeRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[fb]">DispMenuSetTrampleCountTimeUp</a> from setdevice.o(i.DispMenuSetTrampleCountTimeUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[104]">DispMenuSetTrampleDelayTimeDown</a> from setdevice.o(i.DispMenuSetTrampleDelayTimeDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[108]">DispMenuSetTrampleDelayTimeEscDown</a> from setdevice.o(i.DispMenuSetTrampleDelayTimeEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[109]">DispMenuSetTrampleDelayTimeEscOk</a> from setdevice.o(i.DispMenuSetTrampleDelayTimeEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[107]">DispMenuSetTrampleDelayTimeEscUp</a> from setdevice.o(i.DispMenuSetTrampleDelayTimeEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[102]">DispMenuSetTrampleDelayTimeInit</a> from setdevice.o(i.DispMenuSetTrampleDelayTimeInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[105]">DispMenuSetTrampleDelayTimeLeft</a> from setdevice.o(i.DispMenuSetTrampleDelayTimeLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[106]">DispMenuSetTrampleDelayTimeRight</a> from setdevice.o(i.DispMenuSetTrampleDelayTimeRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[103]">DispMenuSetTrampleDelayTimeUp</a> from setdevice.o(i.DispMenuSetTrampleDelayTimeUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[10c]">DispMenuSetTrampleNumberDown</a> from setdevice.o(i.DispMenuSetTrampleNumberDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[110]">DispMenuSetTrampleNumberEscDown</a> from setdevice.o(i.DispMenuSetTrampleNumberEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[111]">DispMenuSetTrampleNumberEscOk</a> from setdevice.o(i.DispMenuSetTrampleNumberEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[10f]">DispMenuSetTrampleNumberEscUp</a> from setdevice.o(i.DispMenuSetTrampleNumberEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[10a]">DispMenuSetTrampleNumberInit</a> from setdevice.o(i.DispMenuSetTrampleNumberInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[10d]">DispMenuSetTrampleNumberLeft</a> from setdevice.o(i.DispMenuSetTrampleNumberLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[10e]">DispMenuSetTrampleNumberRight</a> from setdevice.o(i.DispMenuSetTrampleNumberRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[10b]">DispMenuSetTrampleNumberUp</a> from setdevice.o(i.DispMenuSetTrampleNumberUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[244]">DispMenuT1000_OnOffDown</a> from setdevice.o(i.DispMenuT1000_OnOffDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[248]">DispMenuT1000_OnOffEscDown</a> from setdevice.o(i.DispMenuT1000_OnOffEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[249]">DispMenuT1000_OnOffEscOk</a> from setdevice.o(i.DispMenuT1000_OnOffEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[247]">DispMenuT1000_OnOffEscUp</a> from setdevice.o(i.DispMenuT1000_OnOffEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[242]">DispMenuT1000_OnOffInit</a> from setdevice.o(i.DispMenuT1000_OnOffInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[245]">DispMenuT1000_OnOffLeft</a> from setdevice.o(i.DispMenuT1000_OnOffLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[246]">DispMenuT1000_OnOffRight</a> from setdevice.o(i.DispMenuT1000_OnOffRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[243]">DispMenuT1000_OnOffUp</a> from setdevice.o(i.DispMenuT1000_OnOffUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[254]">DispMenuT1000_TimerDown</a> from setdevice.o(i.DispMenuT1000_TimerDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[258]">DispMenuT1000_TimerEscDown</a> from setdevice.o(i.DispMenuT1000_TimerEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[259]">DispMenuT1000_TimerEscOk</a> from setdevice.o(i.DispMenuT1000_TimerEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[257]">DispMenuT1000_TimerEscUp</a> from setdevice.o(i.DispMenuT1000_TimerEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[252]">DispMenuT1000_TimerInit</a> from setdevice.o(i.DispMenuT1000_TimerInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[255]">DispMenuT1000_TimerLeft</a> from setdevice.o(i.DispMenuT1000_TimerLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[256]">DispMenuT1000_TimerRight</a> from setdevice.o(i.DispMenuT1000_TimerRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[253]">DispMenuT1000_TimerUp</a> from setdevice.o(i.DispMenuT1000_TimerUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[16c]">DispMenuTimeSetDown</a> from setdevice.o(i.DispMenuTimeSetDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[170]">DispMenuTimeSetEscDown</a> from setdevice.o(i.DispMenuTimeSetEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[171]">DispMenuTimeSetEscOk</a> from setdevice.o(i.DispMenuTimeSetEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[16f]">DispMenuTimeSetEscUp</a> from setdevice.o(i.DispMenuTimeSetEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[16a]">DispMenuTimeSetInit</a> from setdevice.o(i.DispMenuTimeSetInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[16d]">DispMenuTimeSetLeft</a> from setdevice.o(i.DispMenuTimeSetLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[16e]">DispMenuTimeSetRight</a> from setdevice.o(i.DispMenuTimeSetRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[16b]">DispMenuTimeSetUp</a> from setdevice.o(i.DispMenuTimeSetUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[a1]">DispMenuTop</a> from menutop.o(i.DispMenuTop) referenced from menufsm.o(.constdata)
 <LI><a href="#[a3]">DispMenuTopDown</a> from menutop.o(i.DispMenuTopDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[a7]">DispMenuTopEscDown</a> from menutop.o(i.DispMenuTopEscDown) referenced 5 times from menufsm.o(.constdata)
 <LI><a href="#[a8]">DispMenuTopEscOk</a> from menutop.o(i.DispMenuTopEscOk) referenced 5 times from menufsm.o(.constdata)
 <LI><a href="#[a6]">DispMenuTopEscUp</a> from menutop.o(i.DispMenuTopEscUp) referenced 5 times from menufsm.o(.constdata)
 <LI><a href="#[a4]">DispMenuTopLeft</a> from menutop.o(i.DispMenuTopLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[a5]">DispMenuTopRight</a> from menutop.o(i.DispMenuTopRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[a2]">DispMenuTopUp</a> from menutop.o(i.DispMenuTopUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1b4]">DispMenuVoicePromptTimeDown</a> from setdevice.o(i.DispMenuVoicePromptTimeDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1b8]">DispMenuVoicePromptTimeEscDown</a> from setdevice.o(i.DispMenuVoicePromptTimeEscDown) referenced from menufsm.o(.constdata)
 <LI><a href="#[1b9]">DispMenuVoicePromptTimeEscOk</a> from setdevice.o(i.DispMenuVoicePromptTimeEscOk) referenced from menufsm.o(.constdata)
 <LI><a href="#[1b7]">DispMenuVoicePromptTimeEscUp</a> from setdevice.o(i.DispMenuVoicePromptTimeEscUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[1b2]">DispMenuVoicePromptTimeInit</a> from setdevice.o(i.DispMenuVoicePromptTimeInit) referenced from menufsm.o(.constdata)
 <LI><a href="#[1b5]">DispMenuVoicePromptTimeLeft</a> from setdevice.o(i.DispMenuVoicePromptTimeLeft) referenced from menufsm.o(.constdata)
 <LI><a href="#[1b6]">DispMenuVoicePromptTimeRight</a> from setdevice.o(i.DispMenuVoicePromptTimeRight) referenced from menufsm.o(.constdata)
 <LI><a href="#[1b3]">DispMenuVoicePromptTimeUp</a> from setdevice.o(i.DispMenuVoicePromptTimeUp) referenced from menufsm.o(.constdata)
 <LI><a href="#[24]">EXTI0_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[46]">EXTI15_10_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[25]">EXTI1_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[26]">EXTI2_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[27]">EXTI3_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[28]">EXTI4_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[35]">EXTI9_5_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[22]">FLASH_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[4e]">FSMC_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[92]">GuardTimeAlarm</a> from lifegrd.o(i.GuardTimeAlarm) referenced from lifegrd.o(i.nodeguardInit)
 <LI><a href="#[6a]">HASH_RNG_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[16]">HardFault_Handler</a> from stm32f2xx_it.o(i.HardFault_Handler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[3e]">I2C1_ER_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[3d]">I2C1_EV_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[40]">I2C2_ER_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[3f]">I2C2_EV_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[65]">I2C3_ER_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[64]">I2C3_EV_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[6f]">Master_heartbeatError</a> from canopenobjdictconfig.o(i.Master_heartbeatError) referenced from canopenobjdictconfig.o(i.CANOpenMasterInit)
 <LI><a href="#[70]">Master_initialisation</a> from canopenobjdictconfig.o(i.Master_initialisation) referenced from canopenobjdictconfig.o(i.CANOpenMasterInit)
 <LI><a href="#[72]">Master_operational</a> from canopenobjdictconfig.o(i.Master_operational) referenced from canopenobjdictconfig.o(i.CANOpenMasterInit)
 <LI><a href="#[77]">Master_post_SlaveBootup</a> from canopenobjdictconfig.o(i.Master_post_SlaveBootup) referenced from canopenobjdictconfig.o(i.CANOpenMasterInit)
 <LI><a href="#[78]">Master_post_SlaveStateChange</a> from canopenobjdictconfig.o(i.Master_post_SlaveStateChange) referenced from canopenobjdictconfig.o(i.CANOpenMasterInit)
 <LI><a href="#[75]">Master_post_TPDO</a> from canopenobjdictconfig.o(i.Master_post_TPDO) referenced from canopenobjdictconfig.o(i.CANOpenMasterInit)
 <LI><a href="#[76]">Master_post_emcy</a> from canopenobjdictconfig.o(i.Master_post_emcy) referenced from canopenobjdictconfig.o(i.CANOpenMasterInit)
 <LI><a href="#[74]">Master_post_sync</a> from canopenobjdictconfig.o(i.Master_post_sync) referenced from canopenobjdictconfig.o(i.CANOpenMasterInit)
 <LI><a href="#[71]">Master_preOperational</a> from canopenobjdictconfig.o(i.Master_preOperational) referenced from canopenobjdictconfig.o(i.CANOpenMasterInit)
 <LI><a href="#[73]">Master_stopped</a> from canopenobjdictconfig.o(i.Master_stopped) referenced from canopenobjdictconfig.o(i.CANOpenMasterInit)
 <LI><a href="#[17]">MemManage_Handler</a> from stm32f2xx_it.o(i.MemManage_Handler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[88]">MyTimr1Callback</a> from app.o(i.MyTimr1Callback) referenced from app.o(i.Task_Start)
 <LI><a href="#[8b]">MyTimr2Callback</a> from app.o(i.MyTimr2Callback) referenced from game1.o(i.game1)
 <LI><a href="#[15]">NMI_Handler</a> from stm32f2xx_it.o(i.NMI_Handler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[6e]">OSTaskSwHook</a> from os_cpu_c.o(i.OSTaskSwHook) referenced from os_cpu_a.o(.text)
 <LI><a href="#[7d]">OSTmr_Task</a> from os_tmr.o(i.OSTmr_Task) referenced from os_tmr.o(i.OSTmr_Init)
 <LI><a href="#[1c]">OS_CPU_PendSVHandler</a> from os_cpu_a.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[7b]">OS_TaskIdle</a> from os_core.o(i.OS_TaskIdle) referenced from os_core.o(i.OSInit)
 <LI><a href="#[7c]">OS_TaskStat</a> from os_core.o(i.OS_TaskStat) referenced from os_core.o(i.OSInit)
 <LI><a href="#[5f]">OTG_FS_IRQHandler</a> from stm32f2xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[48]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[67]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[66]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[69]">OTG_HS_IRQHandler</a> from stm32f2xx_it.o(i.OTG_HS_IRQHandler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[68]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[11]">ObjDict_scanIndexOD</a> from objdict.o(i.ObjDict_scanIndexOD) referenced 2 times from objdict.o(.data)
 <LI><a href="#[6]">ObjDict_valueRangeTest</a> from objdict.o(i.ObjDict_valueRangeTest) referenced 2 times from objdict.o(.data)
 <LI><a href="#[95]">OnCOB_ID_SyncUpdate</a> from sync.o(i.OnCOB_ID_SyncUpdate) referenced from sync.o(i.startSYNC)
 <LI><a href="#[8c]">OnHeartbeatProducerUpdate</a> from lifegrd.o(i.OnHeartbeatProducerUpdate) referenced from lifegrd.o(i.heartbeatInit)
 <LI><a href="#[91]">OnNodeGuardUpdate</a> from lifegrd.o(i.OnNodeGuardUpdate) referenced from lifegrd.o(i.nodeguardInit)
 <LI><a href="#[8a]">OnNumberOfErrorsUpdate</a> from emcy.o(i.OnNumberOfErrorsUpdate) referenced from emcy.o(i.emergencyInit)
 <LI><a href="#[93]">PDOEventTimerAlarm</a> from pdo.o(i.PDOEventTimerAlarm) referenced from pdo.o(i.sendOnePDOevent)
 <LI><a href="#[94]">PDOInhibitTimerAlarm</a> from pdo.o(i.PDOInhibitTimerAlarm) referenced from pdo.o(i.sendOnePDOevent)
 <LI><a href="#[1f]">PVD_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[8e]">ProducerHeartbeatAlarm</a> from lifegrd.o(i.ProducerHeartbeatAlarm) referenced from lifegrd.o(i.heartbeatInit)
 <LI><a href="#[23]">RCC_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[47]">RTC_Alarm_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[21]">RTC_WKUP_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[14]">Reset_Handler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[4f]">SDIO_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[8f]">SDOTimeoutAlarm</a> from sdo.o(i.SDOTimeoutAlarm) referenced from sdo.o(i.initSDOline)
 <LI><a href="#[8f]">SDOTimeoutAlarm</a> from sdo.o(i.SDOTimeoutAlarm) referenced 4 times from sdo.o(i.proceedSDO)
 <LI><a href="#[9c]">SD_initialize</a> from sd_diskio.o(i.SD_initialize) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[a0]">SD_ioctl</a> from sd_diskio.o(i.SD_ioctl) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[9e]">SD_read</a> from sd_diskio.o(i.SD_read) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[9d]">SD_status</a> from sd_diskio.o(i.SD_status) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[9f]">SD_write</a> from sd_diskio.o(i.SD_write) referenced from sd_diskio.o(.constdata)
 <LI><a href="#[41]">SPI1_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[42]">SPI2_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[51]">SPI3_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[1a]">SVC_Handler</a> from stm32f2xx_it.o(i.SVC_Handler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[96]">SyncAlarm</a> from sync.o(i.SyncAlarm) referenced from sync.o(i.startSYNC)
 <LI><a href="#[1d]">SysTick_Handler</a> from stm32f2xx_it.o(i.SysTick_Handler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[6c]">SystemInit</a> from system_stm32f2xx.o(i.SystemInit) referenced from startup_stm32f205xx.o(.text)
 <LI><a href="#[20]">TAMP_STAMP_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[36]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[39]">TIM1_CC_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[38]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[37]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[3a]">TIM2_IRQHandler</a> from timr_delay.o(i.TIM2_IRQHandler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[3b]">TIM3_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[3c]">TIM4_IRQHandler</a> from timer_stm32_hal.o(i.TIM4_IRQHandler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[50]">TIM5_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[54]">TIM6_DAC_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[55]">TIM7_IRQHandler</a> from usart2.o(i.TIM7_IRQHandler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[49]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[4c]">TIM8_CC_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[4b]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[4a]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[7e]">TPDO_Communication_Parameter_Callback</a> from pdo.o(i.TPDO_Communication_Parameter_Callback) referenced from pdo.o(i.PDOInit)
 <LI><a href="#[80]">Task_AutoLighits</a> from app.o(i.Task_AutoLighits) referenced from app.o(i.Task_Start)
 <LI><a href="#[81]">Task_Display</a> from app.o(i.Task_Display) referenced from app.o(i.Task_Start)
 <LI><a href="#[83]">Task_Game</a> from app.o(i.Task_Game) referenced from app.o(i.Task_Start)
 <LI><a href="#[84]">Task_GameVoicePrompt</a> from app.o(i.Task_GameVoicePrompt) referenced from app.o(i.Task_Start)
 <LI><a href="#[86]">Task_LedControl</a> from app.o(i.Task_LedControl) referenced from app.o(i.Task_Start)
 <LI><a href="#[87]">Task_Mco_Rx</a> from app.o(i.Task_Mco_Rx) referenced from app.o(i.Task_Start)
 <LI><a href="#[7f]">Task_MidiPlay</a> from app.o(i.Task_MidiPlay) referenced from app.o(i.Task_Start)
 <LI><a href="#[82]">Task_Scan</a> from app.o(i.Task_Scan) referenced from app.o(i.Task_Start)
 <LI><a href="#[90]">Task_Start</a> from app.o(i.Task_Start) referenced from main.o(i.main)
 <LI><a href="#[85]">Task_XFS5152CE_Play</a> from app.o(i.Task_XFS5152CE_Play) referenced from app.o(i.Task_Start)
 <LI><a href="#[52]">UART4_IRQHandler</a> from uart4.o(i.UART4_IRQHandler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[53]">UART5_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[79]">UART_DMAAbortOnError</a> from stm32f2xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f2xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[43]">USART1_IRQHandler</a> from usart1.o(i.USART1_IRQHandler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[44]">USART2_IRQHandler</a> from usart2.o(i.USART2_IRQHandler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[45]">USART3_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[63]">USART6_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[2]">USBH_MSC_ClassRequest</a> from usbh_msc.o(i.USBH_MSC_ClassRequest) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[1]">USBH_MSC_InterfaceDeInit</a> from usbh_msc.o(i.USBH_MSC_InterfaceDeInit) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[0]">USBH_MSC_InterfaceInit</a> from usbh_msc.o(i.USBH_MSC_InterfaceInit) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[3]">USBH_MSC_Process</a> from usbh_msc.o(i.USBH_MSC_Process) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[4]">USBH_MSC_SOFProcess</a> from usbh_msc.o(i.USBH_MSC_SOFProcess) referenced 2 times from usbh_msc.o(.data)
 <LI><a href="#[7a]">USBH_UserProcess</a> from usb_host.o(i.USBH_UserProcess) referenced from usb_host.o(i.MX_USB_HOST_Init)
 <LI><a href="#[97]">USBH_initialize</a> from usbh_diskio.o(i.USBH_initialize) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[9b]">USBH_ioctl</a> from usbh_diskio.o(i.USBH_ioctl) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[99]">USBH_read</a> from usbh_diskio.o(i.USBH_read) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[98]">USBH_status</a> from usbh_diskio.o(i.USBH_status) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[9a]">USBH_write</a> from usbh_diskio.o(i.USBH_write) referenced from usbh_diskio.o(.constdata)
 <LI><a href="#[19]">UsageFault_Handler</a> from stm32f2xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[1e]">WWDG_IRQHandler</a> from startup_stm32f205xx.o(.text) referenced from startup_stm32f205xx.o(RESET)
 <LI><a href="#[5]">_RxPDO_EventTimers_Handler</a> from pdo.o(i._RxPDO_EventTimers_Handler) referenced 2 times from objdict.o(.data)
 <LI><a href="#[6d]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f205xx.o(.text)
 <LI><a href="#[b]">_heartbeatError</a> from lifegrd.o(i._heartbeatError) referenced 2 times from objdict.o(.data)
 <LI><a href="#[7]">_initialisation</a> from states.o(i._initialisation) referenced 2 times from objdict.o(.data)
 <LI><a href="#[c]">_nodeguardError</a> from lifegrd.o(i._nodeguardError) referenced 2 times from objdict.o(.data)
 <LI><a href="#[9]">_operational</a> from states.o(i._operational) referenced 2 times from objdict.o(.data)
 <LI><a href="#[f]">_post_SlaveBootup</a> from lifegrd.o(i._post_SlaveBootup) referenced 2 times from objdict.o(.data)
 <LI><a href="#[10]">_post_SlaveStateChange</a> from lifegrd.o(i._post_SlaveStateChange) referenced 2 times from objdict.o(.data)
 <LI><a href="#[e]">_post_TPDO</a> from sync.o(i._post_TPDO) referenced 2 times from objdict.o(.data)
 <LI><a href="#[13]">_post_emcy</a> from emcy.o(i._post_emcy) referenced 2 times from objdict.o(.data)
 <LI><a href="#[d]">_post_sync</a> from sync.o(i._post_sync) referenced 2 times from objdict.o(.data)
 <LI><a href="#[8]">_preOperational</a> from states.o(i._preOperational) referenced 2 times from objdict.o(.data)
 <LI><a href="#[89]">_snputc</a> from printf6.o(i._snputc) referenced from printf6.o(i.__0snprintf$6)
 <LI><a href="#[a]">_stopped</a> from states.o(i._stopped) referenced 2 times from objdict.o(.data)
 <LI><a href="#[12]">_storeODSubIndex</a> from objacces.o(i._storeODSubIndex) referenced 2 times from objdict.o(.data)
 <LI><a href="#[6b]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6d]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(.text)
</UL>
<P><STRONG><a name="[4c8]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[27a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[288]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[4c9]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[4ca]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[4cb]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[4cc]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[4cd]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[14]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f205xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[396]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
</UL>

<P><STRONG><a name="[397]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
</UL>

<P><STRONG><a name="[3b8]"></a>OSStartHighRdy</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
</UL>

<P><STRONG><a name="[3d0]"></a>OSCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[3a9]"></a>OSIntCtxSw</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
</UL>

<P><STRONG><a name="[1c]"></a>OS_CPU_PendSVHandler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, os_cpu_a.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[27c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>

<P><STRONG><a name="[423]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxLedControlCmd
</UL>

<P><STRONG><a name="[333]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetLUNInfo
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[4ce]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[280]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[4cf]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[4d0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[27f]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
</UL>

<P><STRONG><a name="[364]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
</UL>

<P><STRONG><a name="[4d1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[281]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[2de]"></a>strncpy</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTop
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerUp
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerInit
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetUp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetInit
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetUp
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetInit
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerUp
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetUp
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetInit
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetUp
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetUp
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetInit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetUp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetUp
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetUp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevUp
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetUp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetInit
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetUp
</UL>

<P><STRONG><a name="[2eb]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMidiFile
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyzeUartPacket
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetInit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetInit
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
</UL>

<P><STRONG><a name="[3eb]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMidiFile
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_XFS5152CE_Play
</UL>

<P><STRONG><a name="[3f1]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMidiFile
</UL>

<P><STRONG><a name="[2f0]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerUp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerUp
</UL>

<P><STRONG><a name="[2c7]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMidiFile
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyzeUartPacket
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetInit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetInit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetInit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevInit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevFailInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetInit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GameVoicePrompt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Game
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameFailure
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameEnd
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDevStatus
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDev
</UL>

<P><STRONG><a name="[282]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerUp
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerInit
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberUp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeUp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeUp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeUp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeUp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeUp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeUp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalUp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressUp
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumUp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetUp
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetInit
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetUp
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetUp
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetInit
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetUp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerUp
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerInit
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetUp
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetUp
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetUp
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetUp
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetUp
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetInit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetUp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetUp
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetInit
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetUp
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetUp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevUp
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetUp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalUp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalUp
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetUp
</UL>

<P><STRONG><a name="[285]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeUp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeUp
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeUp
</UL>

<P><STRONG><a name="[4d2]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[472]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[27e]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[4d3]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[27d]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[4d4]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[284]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[27b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[4d5]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[286]"></a>__rt_ctype_table</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ctype_o.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[287]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[289]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[4d6]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[4d7]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[28a]"></a>AT24CXX_Init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, 24cxx.o(i.AT24CXX_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = AT24CXX_Init &rArr; EepromVerify &rArr; EepromDataInit &rArr; ResetParametersData &rArr; LodeParametersData &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromVerify
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[28d]"></a>AT24CXX_Read</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, 24cxx.o(i.AT24CXX_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodeParametersData
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerUp
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_OnOffUp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberUp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeUp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeUp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeUp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeUp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeUp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeUp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeUp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeUp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalUp
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumUp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSelectUp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetUp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetUp
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetUp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMusicStatusSetUp
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetUp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerUp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_OnOffUp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsStatusSetUp
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpeedSetUp
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetUp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsModeSetUp
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetUp
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetUp
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetUp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLanguageUp
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetUp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameSelectUp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSelectUp
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetUp
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetUp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuColorOrderSetUp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChipTypeSetUp
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetUp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalUp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalUp
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeUp
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameRankingDataSave
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameRankingDataClean
</UL>

<P><STRONG><a name="[28e]"></a>AT24CXX_ReadOneByte</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, 24cxx.o(i.AT24CXX_ReadOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromVerify
</UL>

<P><STRONG><a name="[294]"></a>AT24CXX_Write</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, 24cxx.o(i.AT24CXX_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerUp
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_OnOffUp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberUp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeUp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeUp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeUp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeUp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeUp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeUp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeUp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeUp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalUp
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumUp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSelectUp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetUp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetUp
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetUp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMusicStatusSetUp
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetUp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerUp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_OnOffUp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsStatusSetUp
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpeedSetUp
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetUp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsModeSetUp
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetUp
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetUp
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetUp
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLanguageUp
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetUp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameSelectUp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSelectUp
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetUp
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetUp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuColorOrderSetUp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChipTypeSetUp
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetUp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalUp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalUp
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeUp
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameRankingDataSave
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetParametersData
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameRankingDataClean
</UL>

<P><STRONG><a name="[295]"></a>AT24CXX_WriteOneByte</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, 24cxx.o(i.AT24CXX_WriteOneByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDataInit
</UL>

<P><STRONG><a name="[3ba]"></a>App_TCBInitHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(i.App_TCBInitHook))
<BR><BR>[Called By]<UL><LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>

<P><STRONG><a name="[3c0]"></a>App_TaskCreateHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(i.App_TaskCreateHook))
<BR><BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
</UL>

<P><STRONG><a name="[297]"></a>App_TaskIdleHook</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, app.o(i.App_TaskIdleHook))
<BR><BR>[Calls]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>

<P><STRONG><a name="[3c3]"></a>App_TaskStatHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(i.App_TaskStatHook))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
</UL>

<P><STRONG><a name="[3c6]"></a>App_TaskSwHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(i.App_TaskSwHook))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSwHook
</UL>

<P><STRONG><a name="[3c9]"></a>App_TimeTickHook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, app.o(i.App_TimeTickHook))
<BR><BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[299]"></a>AutoLightsDelay</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lights.o(i.AutoLightsDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = AutoLightsDelay &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lights_colour_select
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scan
</UL>

<P><STRONG><a name="[29d]"></a>AutoPlayDelay</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, app.o(i.AutoPlayDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = AutoPlayDelay &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scan
</UL>

<P><STRONG><a name="[29e]"></a>BSP_Init</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, bsp.o(i.BSP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = BSP_Init &rArr; CanopenInit &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_detect_gpio_confing
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_Config
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodeParametersData
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_init
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanopenInit
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1000_POWER_GPIO_Config
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_GPIO_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2af]"></a>Bar</STRONG> (Thumb, 434 bytes, Stack size 56 bytes, ks0108.o(i.Bar))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Bar &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetEnFont
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuRight
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuLeft
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuInit
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>

<P><STRONG><a name="[2b3]"></a>BarDisp</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, menutop.o(i.BarDisp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>

<P><STRONG><a name="[2b6]"></a>BarMenuInit</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, menutop.o(i.BarMenuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDisp
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSetInit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSelectInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuParaInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMeasureInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedControlSetInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLanguageInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameSelectInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSetInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSelectInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFuncInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightSetInit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuColorOrderSetInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuClockSetInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChipTypeSetInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuBabyModeSetInit
</UL>

<P><STRONG><a name="[2b8]"></a>BarMenuLeft</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, menutop.o(i.BarMenuLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSetLeft
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSelectLeft
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuParaLeft
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMeasureLeft
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedControlSetLeft
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLanguageLeft
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameSelectLeft
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSetLeft
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSelectLeft
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFuncLeft
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightSetLeft
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuColorOrderSetLeft
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuClockSetLeft
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChipTypeSetLeft
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuBabyModeSetLeft
</UL>

<P><STRONG><a name="[2ba]"></a>BarMenuRight</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, menutop.o(i.BarMenuRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDisp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSetRight
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSelectRight
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuParaRight
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMeasureRight
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedControlSetRight
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLanguageRight
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameSelectRight
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSetRight
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSelectRight
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFuncRight
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightSetRight
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuColorOrderSetRight
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuClockSetRight
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChipTypeSetRight
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuBabyModeSetRight
</UL>

<P><STRONG><a name="[18]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, can_stm32_hal.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Receive
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCanHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, can_stm32_hal.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Receive
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCanHandle
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[2bf]"></a>CANOpenMasterInit</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, canopenobjdictconfig.o(i.CANOpenMasterInit))
<BR><BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanopenInit
</UL>

<P><STRONG><a name="[424]"></a>CRC16</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, crc16.o(i.CRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxLedControlCmd
</UL>

<P><STRONG><a name="[2e9]"></a>CaculateWeekDay</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, rtc.o(i.CaculateWeekDay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CaculateWeekDay
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetUp
</UL>

<P><STRONG><a name="[2ad]"></a>CanopenInit</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, canopenobjdictconfig.o(i.CanopenInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = CanopenInit &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNodeId
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANOpenMasterInit
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[2c3]"></a>CheckKey</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, menufsm.o(i.CheckKey))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CheckKey &rArr; key_scan &rArr; get_io_key_val
</UL>
<BR>[Calls]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Display
</UL>

<P><STRONG><a name="[2c5]"></a>ConfigDev</STRONG> (Thumb, 606 bytes, Stack size 96 bytes, setdevice.o(i.ConfigDev))
<BR><BR>[Stack]<UL><LI>Max Depth = 388 + Unknown Stack Size
<LI>Call Chain = ConfigDev &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCanHandle
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNetworkDict
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDevTimeOut
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevUp
</UL>

<P><STRONG><a name="[2cf]"></a>ConfigDevStatus</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, setdevice.o(i.ConfigDevStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ConfigDevStatus &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevUp
</UL>

<P><STRONG><a name="[2cd]"></a>ConfigDevTimeOut</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, setdevice.o(i.ConfigDevTimeOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ConfigDevTimeOut &rArr; getWriteResultNetworkDict &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteResultNetworkDict
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDev
</UL>

<P><STRONG><a name="[8d]"></a>ConsumerHeartbeatAlarm</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lifegrd.o(i.ConsumerHeartbeatAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConsumerHeartbeatAlarm
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lifegrd.o(i.proceedNODE_GUARD)
<LI> lifegrd.o(i.heartbeatInit)
</UL>
<P><STRONG><a name="[47d]"></a>CopyBits</STRONG> (Thumb, 174 bytes, Stack size 36 bytes, pdo.o(i.CopyBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = CopyBits
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>

<P><STRONG><a name="[1b]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[310]"></a>DelAlarm</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, timer.o(i.DelAlarm))
<BR><BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDO_Communication_Parameter_Callback
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardStop
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHeartbeatAlarm
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuardTimeAlarm
</UL>

<P><STRONG><a name="[2a1]"></a>Delay_init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, timr_delay.o(i.Delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Delay_init &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[3e4]"></a>Delay_us</STRONG> (Thumb, 126 bytes, Stack size 12 bytes, timr_delay.o(i.Delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
</UL>

<P><STRONG><a name="[2d6]"></a>DispBuildTime</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, menutop.o(i.DispBuildTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = DispBuildTime &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTopDown
</UL>

<P><STRONG><a name="[ab]"></a>DispIcoMenuDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menutop.o(i.DispIcoMenuDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[a9]"></a>DispIcoMenuInit</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, menutop.o(i.DispIcoMenuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = DispIcoMenuInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawIcon
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[ac]"></a>DispIcoMenuLeft</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, menutop.o(i.DispIcoMenuLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispIcoMenuLeft &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawIcon
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[ad]"></a>DispIcoMenuRight</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, menutop.o(i.DispIcoMenuRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispIcoMenuRight &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawIcon
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[aa]"></a>DispIcoMenuUp</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, menutop.o(i.DispIcoMenuUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DispIcoMenuUp &rArr; GUI_Clear &rArr; Display_Clear &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[17c]"></a>DispMenuAboutDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuAboutDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[180]"></a>DispMenuAboutEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuAboutEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[181]"></a>DispMenuAboutEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuAboutEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[17f]"></a>DispMenuAboutEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuAboutEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[17a]"></a>DispMenuAboutInit</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuAboutInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DispMenuAboutInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[17d]"></a>DispMenuAboutLeft</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuAboutLeft))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[17e]"></a>DispMenuAboutRight</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuAboutRight))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[17b]"></a>DispMenuAboutUp</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuAboutUp))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[14c]"></a>DispMenuBabyModeSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuBabyModeSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[150]"></a>DispMenuBabyModeSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuBabyModeSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[151]"></a>DispMenuBabyModeSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuBabyModeSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[14f]"></a>DispMenuBabyModeSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuBabyModeSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[14a]"></a>DispMenuBabyModeSetInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuBabyModeSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuBabyModeSetInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[14d]"></a>DispMenuBabyModeSetLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuBabyModeSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuBabyModeSetLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[14e]"></a>DispMenuBabyModeSetRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuBabyModeSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuBabyModeSetRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[14b]"></a>DispMenuBabyModeSetUp</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuBabyModeSetUp))
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[184]"></a>DispMenuCAN1DevicesTotalDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuCAN1DevicesTotalDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[188]"></a>DispMenuCAN1DevicesTotalEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuCAN1DevicesTotalEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[189]"></a>DispMenuCAN1DevicesTotalEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuCAN1DevicesTotalEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[187]"></a>DispMenuCAN1DevicesTotalEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuCAN1DevicesTotalEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[182]"></a>DispMenuCAN1DevicesTotalInit</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuCAN1DevicesTotalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuCAN1DevicesTotalInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[185]"></a>DispMenuCAN1DevicesTotalLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuCAN1DevicesTotalLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuCAN1DevicesTotalLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[186]"></a>DispMenuCAN1DevicesTotalRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuCAN1DevicesTotalRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuCAN1DevicesTotalRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[183]"></a>DispMenuCAN1DevicesTotalUp</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuCAN1DevicesTotalUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuCAN1DevicesTotalUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[18c]"></a>DispMenuCAN2DevicesTotalDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuCAN2DevicesTotalDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[190]"></a>DispMenuCAN2DevicesTotalEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuCAN2DevicesTotalEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[191]"></a>DispMenuCAN2DevicesTotalEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuCAN2DevicesTotalEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[18f]"></a>DispMenuCAN2DevicesTotalEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuCAN2DevicesTotalEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[18a]"></a>DispMenuCAN2DevicesTotalInit</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuCAN2DevicesTotalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuCAN2DevicesTotalInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[18d]"></a>DispMenuCAN2DevicesTotalLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuCAN2DevicesTotalLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuCAN2DevicesTotalLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[18e]"></a>DispMenuCAN2DevicesTotalRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuCAN2DevicesTotalRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuCAN2DevicesTotalRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[18b]"></a>DispMenuCAN2DevicesTotalUp</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuCAN2DevicesTotalUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuCAN2DevicesTotalUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1d4]"></a>DispMenuChinesePinyinSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuChinesePinyinSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1d8]"></a>DispMenuChinesePinyinSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuChinesePinyinSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1d9]"></a>DispMenuChinesePinyinSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuChinesePinyinSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1d7]"></a>DispMenuChinesePinyinSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuChinesePinyinSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1d2]"></a>DispMenuChinesePinyinSetInit</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, setdevice.o(i.DispMenuChinesePinyinSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = DispMenuChinesePinyinSetInit &rArr; DisplayPromptInfo &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1d5]"></a>DispMenuChinesePinyinSetLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuChinesePinyinSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuChinesePinyinSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1d6]"></a>DispMenuChinesePinyinSetRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuChinesePinyinSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuChinesePinyinSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1d3]"></a>DispMenuChinesePinyinSetUp</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, setdevice.o(i.DispMenuChinesePinyinSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = DispMenuChinesePinyinSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1ec]"></a>DispMenuChipTypeSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuChipTypeSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1f0]"></a>DispMenuChipTypeSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuChipTypeSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1f1]"></a>DispMenuChipTypeSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuChipTypeSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1ef]"></a>DispMenuChipTypeSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuChipTypeSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1ea]"></a>DispMenuChipTypeSetInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuChipTypeSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuChipTypeSetInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1ed]"></a>DispMenuChipTypeSetLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuChipTypeSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuChipTypeSetLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1ee]"></a>DispMenuChipTypeSetRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuChipTypeSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuChipTypeSetRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1eb]"></a>DispMenuChipTypeSetUp</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuChipTypeSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuChipTypeSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[19c]"></a>DispMenuCleanRankingDataDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuCleanRankingDataDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1a0]"></a>DispMenuCleanRankingDataEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuCleanRankingDataEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1a1]"></a>DispMenuCleanRankingDataEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuCleanRankingDataEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[19f]"></a>DispMenuCleanRankingDataEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuCleanRankingDataEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[19a]"></a>DispMenuCleanRankingDataInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuCleanRankingDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DispMenuCleanRankingDataInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[19d]"></a>DispMenuCleanRankingDataLeft</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuCleanRankingDataLeft))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[19e]"></a>DispMenuCleanRankingDataRight</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuCleanRankingDataRight))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[19b]"></a>DispMenuCleanRankingDataUp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuCleanRankingDataUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DispMenuCleanRankingDataUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameRankingDataClean
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[164]"></a>DispMenuClockSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuClockSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[168]"></a>DispMenuClockSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuClockSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[169]"></a>DispMenuClockSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuClockSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[167]"></a>DispMenuClockSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuClockSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[162]"></a>DispMenuClockSetInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuClockSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuClockSetInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[165]"></a>DispMenuClockSetLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuClockSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuClockSetLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[166]"></a>DispMenuClockSetRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuClockSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuClockSetRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[163]"></a>DispMenuClockSetUp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuClockSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuClockSetUp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[224]"></a>DispMenuColorOrderSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuColorOrderSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[228]"></a>DispMenuColorOrderSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuColorOrderSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[229]"></a>DispMenuColorOrderSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuColorOrderSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[227]"></a>DispMenuColorOrderSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuColorOrderSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[222]"></a>DispMenuColorOrderSetInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuColorOrderSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuColorOrderSetInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[225]"></a>DispMenuColorOrderSetLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuColorOrderSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuColorOrderSetLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[226]"></a>DispMenuColorOrderSetRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuColorOrderSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuColorOrderSetRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[223]"></a>DispMenuColorOrderSetUp</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuColorOrderSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuColorOrderSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[264]"></a>DispMenuConfig_M_DevDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_M_DevDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[268]"></a>DispMenuConfig_M_DevEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_M_DevEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[269]"></a>DispMenuConfig_M_DevEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_M_DevEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[267]"></a>DispMenuConfig_M_DevEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_M_DevEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[26c]"></a>DispMenuConfig_M_DevFailDown</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_M_DevFailDown))
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[270]"></a>DispMenuConfig_M_DevFailEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_M_DevFailEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[271]"></a>DispMenuConfig_M_DevFailEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_M_DevFailEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[26f]"></a>DispMenuConfig_M_DevFailEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_M_DevFailEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[26a]"></a>DispMenuConfig_M_DevFailInit</STRONG> (Thumb, 194 bytes, Stack size 40 bytes, setdevice.o(i.DispMenuConfig_M_DevFailInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DispMenuConfig_M_DevFailInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[26d]"></a>DispMenuConfig_M_DevFailLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuConfig_M_DevFailLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuConfig_M_DevFailLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[26e]"></a>DispMenuConfig_M_DevFailRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuConfig_M_DevFailRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuConfig_M_DevFailRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[26b]"></a>DispMenuConfig_M_DevFailUp</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_M_DevFailUp))
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[262]"></a>DispMenuConfig_M_DevInit</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuConfig_M_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DispMenuConfig_M_DevInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[265]"></a>DispMenuConfig_M_DevLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuConfig_M_DevLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuConfig_M_DevLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[266]"></a>DispMenuConfig_M_DevRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuConfig_M_DevRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuConfig_M_DevRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[263]"></a>DispMenuConfig_M_DevUp</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, setdevice.o(i.DispMenuConfig_M_DevUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = DispMenuConfig_M_DevUp &rArr; ConfigDev &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Read_Inputs_8_Bit
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDevStatus
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[25c]"></a>DispMenuConfig_S_DevDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_S_DevDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[260]"></a>DispMenuConfig_S_DevEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_S_DevEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[261]"></a>DispMenuConfig_S_DevEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_S_DevEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[25f]"></a>DispMenuConfig_S_DevEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_S_DevEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[25a]"></a>DispMenuConfig_S_DevInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuConfig_S_DevInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DispMenuConfig_S_DevInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[25d]"></a>DispMenuConfig_S_DevLeft</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_S_DevLeft))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[25e]"></a>DispMenuConfig_S_DevRight</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuConfig_S_DevRight))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[25b]"></a>DispMenuConfig_S_DevUp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuConfig_S_DevUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DispMenuConfig_S_DevUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetParametersData
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[21c]"></a>DispMenuControlAddrSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuControlAddrSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[220]"></a>DispMenuControlAddrSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuControlAddrSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[221]"></a>DispMenuControlAddrSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuControlAddrSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[21f]"></a>DispMenuControlAddrSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuControlAddrSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[21a]"></a>DispMenuControlAddrSetInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuControlAddrSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuControlAddrSetInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[21d]"></a>DispMenuControlAddrSetLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuControlAddrSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuControlAddrSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[21e]"></a>DispMenuControlAddrSetRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuControlAddrSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuControlAddrSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[21b]"></a>DispMenuControlAddrSetUp</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuControlAddrSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuControlAddrSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxStudyCodeCommands
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[174]"></a>DispMenuDateSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuDateSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[178]"></a>DispMenuDateSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuDateSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[179]"></a>DispMenuDateSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuDateSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[177]"></a>DispMenuDateSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuDateSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[172]"></a>DispMenuDateSetInit</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuDateSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DispMenuDateSetInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[175]"></a>DispMenuDateSetLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuDateSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuDateSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[176]"></a>DispMenuDateSetRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuDateSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuDateSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[173]"></a>DispMenuDateSetUp</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuDateSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuDateSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CaculateWeekDay
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1cc]"></a>DispMenuEnglishCharSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuEnglishCharSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1d0]"></a>DispMenuEnglishCharSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuEnglishCharSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1d1]"></a>DispMenuEnglishCharSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuEnglishCharSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1cf]"></a>DispMenuEnglishCharSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuEnglishCharSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1ca]"></a>DispMenuEnglishCharSetInit</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, setdevice.o(i.DispMenuEnglishCharSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = DispMenuEnglishCharSetInit &rArr; DisplayPromptInfo &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1cd]"></a>DispMenuEnglishCharSetLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuEnglishCharSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuEnglishCharSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1ce]"></a>DispMenuEnglishCharSetRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuEnglishCharSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuEnglishCharSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1cb]"></a>DispMenuEnglishCharSetUp</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, setdevice.o(i.DispMenuEnglishCharSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = DispMenuEnglishCharSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[e4]"></a>DispMenuFactorySetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFactorySetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[e8]"></a>DispMenuFactorySetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFactorySetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[e9]"></a>DispMenuFactorySetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFactorySetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[e7]"></a>DispMenuFactorySetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFactorySetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[e2]"></a>DispMenuFactorySetInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuFactorySetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DispMenuFactorySetInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[e5]"></a>DispMenuFactorySetLeft</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFactorySetLeft))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[e6]"></a>DispMenuFactorySetRight</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFactorySetRight))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[e3]"></a>DispMenuFactorySetUp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuFactorySetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = DispMenuFactorySetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetParametersData
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1fc]"></a>DispMenuFullColorLightPatternSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFullColorLightPatternSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[200]"></a>DispMenuFullColorLightPatternSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFullColorLightPatternSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[201]"></a>DispMenuFullColorLightPatternSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFullColorLightPatternSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1ff]"></a>DispMenuFullColorLightPatternSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFullColorLightPatternSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1fa]"></a>DispMenuFullColorLightPatternSetInit</STRONG> (Thumb, 458 bytes, Stack size 56 bytes, setdevice.o(i.DispMenuFullColorLightPatternSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = DispMenuFullColorLightPatternSetInit &rArr; DisplayPromptInfo &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetEnFont
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1fd]"></a>DispMenuFullColorLightPatternSetLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuFullColorLightPatternSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuFullColorLightPatternSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1fe]"></a>DispMenuFullColorLightPatternSetRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuFullColorLightPatternSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuFullColorLightPatternSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1fb]"></a>DispMenuFullColorLightPatternSetUp</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuFullColorLightPatternSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuFullColorLightPatternSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1e4]"></a>DispMenuFullColorLightSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFullColorLightSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1e8]"></a>DispMenuFullColorLightSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFullColorLightSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1e9]"></a>DispMenuFullColorLightSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFullColorLightSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1e7]"></a>DispMenuFullColorLightSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFullColorLightSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1e2]"></a>DispMenuFullColorLightSetInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuFullColorLightSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuFullColorLightSetInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1e5]"></a>DispMenuFullColorLightSetLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFullColorLightSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuFullColorLightSetLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1e6]"></a>DispMenuFullColorLightSetRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuFullColorLightSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuFullColorLightSetRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1e3]"></a>DispMenuFullColorLightSetUp</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuFullColorLightSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuFullColorLightSetUp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[b0]"></a>DispMenuFuncDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menufunc.o(i.DispMenuFuncDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[ae]"></a>DispMenuFuncInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, menufunc.o(i.DispMenuFuncInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuFuncInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[b1]"></a>DispMenuFuncLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menufunc.o(i.DispMenuFuncLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuFuncLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[b2]"></a>DispMenuFuncRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menufunc.o(i.DispMenuFuncRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuFuncRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[af]"></a>DispMenuFuncUp</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, menufunc.o(i.DispMenuFuncUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuFuncUp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[13c]"></a>DispMenuGameModeSelectDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameModeSelectDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[140]"></a>DispMenuGameModeSelectEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameModeSelectEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[141]"></a>DispMenuGameModeSelectEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameModeSelectEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[13f]"></a>DispMenuGameModeSelectEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameModeSelectEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[13a]"></a>DispMenuGameModeSelectInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuGameModeSelectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuGameModeSelectInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[13d]"></a>DispMenuGameModeSelectLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameModeSelectLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuGameModeSelectLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[13e]"></a>DispMenuGameModeSelectRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameModeSelectRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuGameModeSelectRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[13b]"></a>DispMenuGameModeSelectUp</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuGameModeSelectUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuGameModeSelectUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[144]"></a>DispMenuGameModeSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameModeSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[148]"></a>DispMenuGameModeSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameModeSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[149]"></a>DispMenuGameModeSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameModeSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[147]"></a>DispMenuGameModeSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameModeSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[142]"></a>DispMenuGameModeSetInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuGameModeSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuGameModeSetInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[145]"></a>DispMenuGameModeSetLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameModeSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuGameModeSetLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[146]"></a>DispMenuGameModeSetRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameModeSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuGameModeSetRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[143]"></a>DispMenuGameModeSetUp</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuGameModeSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuGameModeSetUp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[194]"></a>DispMenuGameSelectDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameSelectDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[198]"></a>DispMenuGameSelectEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameSelectEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>DispMenuGameSelectEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameSelectEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[197]"></a>DispMenuGameSelectEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameSelectEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[192]"></a>DispMenuGameSelectInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuGameSelectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuGameSelectInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[195]"></a>DispMenuGameSelectLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameSelectLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuGameSelectLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[196]"></a>DispMenuGameSelectRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGameSelectRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuGameSelectRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[193]"></a>DispMenuGameSelectUp</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuGameSelectUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuGameSelectUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[20c]"></a>DispMenuGroupsLedNumberSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGroupsLedNumberSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[210]"></a>DispMenuGroupsLedNumberSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGroupsLedNumberSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[211]"></a>DispMenuGroupsLedNumberSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGroupsLedNumberSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[20f]"></a>DispMenuGroupsLedNumberSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuGroupsLedNumberSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[20a]"></a>DispMenuGroupsLedNumberSetInit</STRONG> (Thumb, 472 bytes, Stack size 56 bytes, setdevice.o(i.DispMenuGroupsLedNumberSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = DispMenuGroupsLedNumberSetInit &rArr; DisplayPromptInfo &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetEnFont
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[20d]"></a>DispMenuGroupsLedNumberSetLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuGroupsLedNumberSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuGroupsLedNumberSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[20e]"></a>DispMenuGroupsLedNumberSetRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuGroupsLedNumberSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuGroupsLedNumberSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[20b]"></a>DispMenuGroupsLedNumberSetUp</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuGroupsLedNumberSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuGroupsLedNumberSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[ba]"></a>DispMenuLanguageDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menulanguage.o(i.DispMenuLanguageDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[b8]"></a>DispMenuLanguageInit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, menulanguage.o(i.DispMenuLanguageInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = DispMenuLanguageInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[bb]"></a>DispMenuLanguageLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menulanguage.o(i.DispMenuLanguageLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuLanguageLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[bc]"></a>DispMenuLanguageRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menulanguage.o(i.DispMenuLanguageRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuLanguageRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[b9]"></a>DispMenuLanguageUp</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, menulanguage.o(i.DispMenuLanguageUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = DispMenuLanguageUp &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[274]"></a>DispMenuLedColorCycleModeSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedColorCycleModeSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[278]"></a>DispMenuLedColorCycleModeSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedColorCycleModeSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[279]"></a>DispMenuLedColorCycleModeSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedColorCycleModeSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[277]"></a>DispMenuLedColorCycleModeSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedColorCycleModeSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[272]"></a>DispMenuLedColorCycleModeSetInit</STRONG> (Thumb, 474 bytes, Stack size 56 bytes, setdevice.o(i.DispMenuLedColorCycleModeSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = DispMenuLedColorCycleModeSetInit &rArr; DisplayPromptInfo &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetEnFont
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[275]"></a>DispMenuLedColorCycleModeSetLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLedColorCycleModeSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLedColorCycleModeSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[276]"></a>DispMenuLedColorCycleModeSetRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLedColorCycleModeSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLedColorCycleModeSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[273]"></a>DispMenuLedColorCycleModeSetUp</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuLedColorCycleModeSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuLedColorCycleModeSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[22c]"></a>DispMenuLedColorCycleTimeSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedColorCycleTimeSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[230]"></a>DispMenuLedColorCycleTimeSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedColorCycleTimeSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[231]"></a>DispMenuLedColorCycleTimeSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedColorCycleTimeSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[22f]"></a>DispMenuLedColorCycleTimeSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedColorCycleTimeSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[22a]"></a>DispMenuLedColorCycleTimeSetInit</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuLedColorCycleTimeSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuLedColorCycleTimeSetInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[22d]"></a>DispMenuLedColorCycleTimeSetLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLedColorCycleTimeSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLedColorCycleTimeSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[22e]"></a>DispMenuLedColorCycleTimeSetRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLedColorCycleTimeSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLedColorCycleTimeSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[22b]"></a>DispMenuLedColorCycleTimeSetUp</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuLedColorCycleTimeSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuLedColorCycleTimeSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[214]"></a>DispMenuLedColourSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedColourSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[218]"></a>DispMenuLedColourSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedColourSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[219]"></a>DispMenuLedColourSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedColourSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[217]"></a>DispMenuLedColourSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedColourSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[212]"></a>DispMenuLedColourSetInit</STRONG> (Thumb, 530 bytes, Stack size 64 bytes, setdevice.o(i.DispMenuLedColourSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuLedColourSetInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetEnFont
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[215]"></a>DispMenuLedColourSetLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLedColourSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLedColourSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[216]"></a>DispMenuLedColourSetRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLedColourSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLedColourSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[213]"></a>DispMenuLedColourSetUp</STRONG> (Thumb, 246 bytes, Stack size 48 bytes, setdevice.o(i.DispMenuLedColourSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = DispMenuLedColourSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[234]"></a>DispMenuLedControlSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedControlSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[238]"></a>DispMenuLedControlSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedControlSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[239]"></a>DispMenuLedControlSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedControlSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[237]"></a>DispMenuLedControlSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedControlSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[232]"></a>DispMenuLedControlSetInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLedControlSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuLedControlSetInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[235]"></a>DispMenuLedControlSetLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedControlSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuLedControlSetLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[236]"></a>DispMenuLedControlSetRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLedControlSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuLedControlSetRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[233]"></a>DispMenuLedControlSetUp</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLedControlSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLedControlSetUp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[124]"></a>DispMenuLightsModeSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsModeSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[128]"></a>DispMenuLightsModeSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsModeSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[129]"></a>DispMenuLightsModeSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsModeSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[127]"></a>DispMenuLightsModeSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsModeSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[122]"></a>DispMenuLightsModeSetInit</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuLightsModeSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DispMenuLightsModeSetInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[125]"></a>DispMenuLightsModeSetLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLightsModeSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLightsModeSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[126]"></a>DispMenuLightsModeSetRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLightsModeSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLightsModeSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[123]"></a>DispMenuLightsModeSetUp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuLightsModeSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuLightsModeSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[134]"></a>DispMenuLightsSpacingSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsSpacingSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[138]"></a>DispMenuLightsSpacingSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsSpacingSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[139]"></a>DispMenuLightsSpacingSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsSpacingSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[137]"></a>DispMenuLightsSpacingSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsSpacingSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[132]"></a>DispMenuLightsSpacingSetInit</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuLightsSpacingSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuLightsSpacingSetInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[135]"></a>DispMenuLightsSpacingSetLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLightsSpacingSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLightsSpacingSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[136]"></a>DispMenuLightsSpacingSetRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLightsSpacingSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLightsSpacingSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[133]"></a>DispMenuLightsSpacingSetUp</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuLightsSpacingSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuLightsSpacingSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[12c]"></a>DispMenuLightsSpeedSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsSpeedSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[130]"></a>DispMenuLightsSpeedSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsSpeedSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[131]"></a>DispMenuLightsSpeedSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsSpeedSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[12f]"></a>DispMenuLightsSpeedSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsSpeedSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[12a]"></a>DispMenuLightsSpeedSetInit</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuLightsSpeedSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DispMenuLightsSpeedSetInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[12d]"></a>DispMenuLightsSpeedSetLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLightsSpeedSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLightsSpeedSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[12e]"></a>DispMenuLightsSpeedSetRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLightsSpeedSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLightsSpeedSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[12b]"></a>DispMenuLightsSpeedSetUp</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuLightsSpeedSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuLightsSpeedSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[dc]"></a>DispMenuLightsStatusSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsStatusSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[e0]"></a>DispMenuLightsStatusSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsStatusSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[e1]"></a>DispMenuLightsStatusSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsStatusSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[df]"></a>DispMenuLightsStatusSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLightsStatusSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[da]"></a>DispMenuLightsStatusSetInit</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuLightsStatusSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DispMenuLightsStatusSetInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[dd]"></a>DispMenuLightsStatusSetLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLightsStatusSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLightsStatusSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[de]"></a>DispMenuLightsStatusSetRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLightsStatusSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLightsStatusSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[db]"></a>DispMenuLightsStatusSetUp</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuLightsStatusSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuLightsStatusSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[23c]"></a>DispMenuLocal_OnOffDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLocal_OnOffDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[240]"></a>DispMenuLocal_OnOffEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLocal_OnOffEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[241]"></a>DispMenuLocal_OnOffEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLocal_OnOffEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[23f]"></a>DispMenuLocal_OnOffEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLocal_OnOffEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[23a]"></a>DispMenuLocal_OnOffInit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, setdevice.o(i.DispMenuLocal_OnOffInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = DispMenuLocal_OnOffInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[23d]"></a>DispMenuLocal_OnOffLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLocal_OnOffLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLocal_OnOffLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[23e]"></a>DispMenuLocal_OnOffRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLocal_OnOffRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLocal_OnOffRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[23b]"></a>DispMenuLocal_OnOffUp</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuLocal_OnOffUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuLocal_OnOffUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[24c]"></a>DispMenuLocal_TimerDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLocal_TimerDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[250]"></a>DispMenuLocal_TimerEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLocal_TimerEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[251]"></a>DispMenuLocal_TimerEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLocal_TimerEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[24f]"></a>DispMenuLocal_TimerEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuLocal_TimerEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[24a]"></a>DispMenuLocal_TimerInit</STRONG> (Thumb, 1476 bytes, Stack size 64 bytes, setdevice.o(i.DispMenuLocal_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = DispMenuLocal_TimerInit &rArr; DisplayPromptInfo &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetEnFont
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeekToChinese
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Local_Timer_Text
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[24d]"></a>DispMenuLocal_TimerLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLocal_TimerLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLocal_TimerLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[24e]"></a>DispMenuLocal_TimerRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuLocal_TimerRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuLocal_TimerRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[24b]"></a>DispMenuLocal_TimerUp</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, setdevice.o(i.DispMenuLocal_TimerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = DispMenuLocal_TimerUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[204]"></a>DispMenuMaxLedNumberSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuMaxLedNumberSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[208]"></a>DispMenuMaxLedNumberSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuMaxLedNumberSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[209]"></a>DispMenuMaxLedNumberSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuMaxLedNumberSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[207]"></a>DispMenuMaxLedNumberSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuMaxLedNumberSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[202]"></a>DispMenuMaxLedNumberSetInit</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuMaxLedNumberSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuMaxLedNumberSetInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[205]"></a>DispMenuMaxLedNumberSetLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuMaxLedNumberSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuMaxLedNumberSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[206]"></a>DispMenuMaxLedNumberSetRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuMaxLedNumberSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuMaxLedNumberSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[203]"></a>DispMenuMaxLedNumberSetUp</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuMaxLedNumberSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuMaxLedNumberSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[bf]"></a>DispMenuMeasureDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menumeasure.o(i.DispMenuMeasureDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[bd]"></a>DispMenuMeasureInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, menumeasure.o(i.DispMenuMeasureInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuMeasureInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[c0]"></a>DispMenuMeasureLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menumeasure.o(i.DispMenuMeasureLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuMeasureLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[c1]"></a>DispMenuMeasureRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menumeasure.o(i.DispMenuMeasureRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuMeasureRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[be]"></a>DispMenuMeasureUp</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, menumeasure.o(i.DispMenuMeasureUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DispMenuMeasureUp &rArr; GUI_Clear &rArr; Display_Clear &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[d4]"></a>DispMenuMusicStatusSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuMusicStatusSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[d8]"></a>DispMenuMusicStatusSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuMusicStatusSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[d9]"></a>DispMenuMusicStatusSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuMusicStatusSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[d7]"></a>DispMenuMusicStatusSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuMusicStatusSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[d2]"></a>DispMenuMusicStatusSetInit</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuMusicStatusSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DispMenuMusicStatusSetInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[d5]"></a>DispMenuMusicStatusSetLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuMusicStatusSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuMusicStatusSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[d6]"></a>DispMenuMusicStatusSetRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuMusicStatusSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuMusicStatusSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[d3]"></a>DispMenuMusicStatusSetUp</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuMusicStatusSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuMusicStatusSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1f4]"></a>DispMenuNumberOfFramesSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuNumberOfFramesSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1f8]"></a>DispMenuNumberOfFramesSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuNumberOfFramesSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1f9]"></a>DispMenuNumberOfFramesSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuNumberOfFramesSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1f7]"></a>DispMenuNumberOfFramesSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuNumberOfFramesSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1f2]"></a>DispMenuNumberOfFramesSetInit</STRONG> (Thumb, 860 bytes, Stack size 64 bytes, setdevice.o(i.DispMenuNumberOfFramesSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = DispMenuNumberOfFramesSetInit &rArr; DisplayPromptInfo &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetEnFont
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1f5]"></a>DispMenuNumberOfFramesSetLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuNumberOfFramesSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuNumberOfFramesSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1f6]"></a>DispMenuNumberOfFramesSetRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuNumberOfFramesSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuNumberOfFramesSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1f3]"></a>DispMenuNumberOfFramesSetUp</STRONG> (Thumb, 364 bytes, Stack size 32 bytes, setdevice.o(i.DispMenuNumberOfFramesSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = DispMenuNumberOfFramesSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[b5]"></a>DispMenuParaDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menupara.o(i.DispMenuParaDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[b3]"></a>DispMenuParaInit</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, menupara.o(i.DispMenuParaInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuParaInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[b6]"></a>DispMenuParaLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menupara.o(i.DispMenuParaLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuParaLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[b7]"></a>DispMenuParaRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, menupara.o(i.DispMenuParaRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuParaRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[b4]"></a>DispMenuParaUp</STRONG> (Thumb, 230 bytes, Stack size 8 bytes, menupara.o(i.DispMenuParaUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuParaUp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[154]"></a>DispMenuRowNumberSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuRowNumberSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[158]"></a>DispMenuRowNumberSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuRowNumberSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[159]"></a>DispMenuRowNumberSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuRowNumberSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[157]"></a>DispMenuRowNumberSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuRowNumberSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[152]"></a>DispMenuRowNumberSetInit</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuRowNumberSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuRowNumberSetInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[155]"></a>DispMenuRowNumberSetLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuRowNumberSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuRowNumberSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[156]"></a>DispMenuRowNumberSetRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuRowNumberSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuRowNumberSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[153]"></a>DispMenuRowNumberSetUp</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuRowNumberSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuRowNumberSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>DispMenuRowsDeviceNumberSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuRowsDeviceNumberSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[160]"></a>DispMenuRowsDeviceNumberSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuRowsDeviceNumberSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[161]"></a>DispMenuRowsDeviceNumberSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuRowsDeviceNumberSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[15f]"></a>DispMenuRowsDeviceNumberSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuRowsDeviceNumberSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[15a]"></a>DispMenuRowsDeviceNumberSetInit</STRONG> (Thumb, 206 bytes, Stack size 40 bytes, setdevice.o(i.DispMenuRowsDeviceNumberSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DispMenuRowsDeviceNumberSetInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[15d]"></a>DispMenuRowsDeviceNumberSetLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuRowsDeviceNumberSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuRowsDeviceNumberSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[15e]"></a>DispMenuRowsDeviceNumberSetRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuRowsDeviceNumberSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuRowsDeviceNumberSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[15b]"></a>DispMenuRowsDeviceNumberSetUp</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, setdevice.o(i.DispMenuRowsDeviceNumberSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = DispMenuRowsDeviceNumberSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1bc]"></a>DispMenuSayModeSelectDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSayModeSelectDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1c0]"></a>DispMenuSayModeSelectEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSayModeSelectEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1c1]"></a>DispMenuSayModeSelectEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSayModeSelectEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1bf]"></a>DispMenuSayModeSelectEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSayModeSelectEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1ba]"></a>DispMenuSayModeSelectInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSayModeSelectInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuSayModeSelectInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1bd]"></a>DispMenuSayModeSelectLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSayModeSelectLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuSayModeSelectLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1be]"></a>DispMenuSayModeSelectRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSayModeSelectRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuSayModeSelectRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1bb]"></a>DispMenuSayModeSelectUp</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSayModeSelectUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuSayModeSelectUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1c4]"></a>DispMenuSayModeSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSayModeSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1c8]"></a>DispMenuSayModeSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSayModeSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1c9]"></a>DispMenuSayModeSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSayModeSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1c7]"></a>DispMenuSayModeSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSayModeSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1c2]"></a>DispMenuSayModeSetInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSayModeSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = DispMenuSayModeSetInit &rArr; BarMenuInit &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1c5]"></a>DispMenuSayModeSetLeft</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSayModeSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuSayModeSetLeft &rArr; BarMenuLeft &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1c6]"></a>DispMenuSayModeSetRight</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSayModeSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = DispMenuSayModeSetRight &rArr; BarMenuRight &rArr; BarDisp &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1c3]"></a>DispMenuSayModeSetUp</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSayModeSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSayModeSetUp
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1a4]"></a>DispMenuSetBeepRowNumDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetBeepRowNumDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1a8]"></a>DispMenuSetBeepRowNumEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetBeepRowNumEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1a9]"></a>DispMenuSetBeepRowNumEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetBeepRowNumEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1a7]"></a>DispMenuSetBeepRowNumEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetBeepRowNumEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1a2]"></a>DispMenuSetBeepRowNumInit</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetBeepRowNumInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuSetBeepRowNumInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1a5]"></a>DispMenuSetBeepRowNumLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetBeepRowNumLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetBeepRowNumLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1a6]"></a>DispMenuSetBeepRowNumRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetBeepRowNumRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetBeepRowNumRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1a3]"></a>DispMenuSetBeepRowNumUp</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuSetBeepRowNumUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuSetBeepRowNumUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[c4]"></a>DispMenuSetDeviceAddressDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetDeviceAddressDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[c8]"></a>DispMenuSetDeviceAddressEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetDeviceAddressEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[c9]"></a>DispMenuSetDeviceAddressEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetDeviceAddressEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[c7]"></a>DispMenuSetDeviceAddressEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetDeviceAddressEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[c2]"></a>DispMenuSetDeviceAddressInit</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetDeviceAddressInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuSetDeviceAddressInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[c5]"></a>DispMenuSetDeviceAddressLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetDeviceAddressLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetDeviceAddressLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[c6]"></a>DispMenuSetDeviceAddressRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetDeviceAddressRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetDeviceAddressRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[c3]"></a>DispMenuSetDeviceAddressUp</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, setdevice.o(i.DispMenuSetDeviceAddressUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = DispMenuSetDeviceAddressUp &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[cc]"></a>DispMenuSetDeviceTotalDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetDeviceTotalDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[d0]"></a>DispMenuSetDeviceTotalEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetDeviceTotalEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[d1]"></a>DispMenuSetDeviceTotalEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetDeviceTotalEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[cf]"></a>DispMenuSetDeviceTotalEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetDeviceTotalEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[ca]"></a>DispMenuSetDeviceTotalInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetDeviceTotalInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuSetDeviceTotalInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[cd]"></a>DispMenuSetDeviceTotalLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetDeviceTotalLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetDeviceTotalLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[ce]"></a>DispMenuSetDeviceTotalRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetDeviceTotalRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetDeviceTotalRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[cb]"></a>DispMenuSetDeviceTotalUp</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetDeviceTotalUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuSetDeviceTotalUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1ac]"></a>DispMenuSetGamePassTimeDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetGamePassTimeDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1b0]"></a>DispMenuSetGamePassTimeEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetGamePassTimeEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1b1]"></a>DispMenuSetGamePassTimeEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetGamePassTimeEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1af]"></a>DispMenuSetGamePassTimeEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetGamePassTimeEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1aa]"></a>DispMenuSetGamePassTimeInit</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetGamePassTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuSetGamePassTimeInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1ad]"></a>DispMenuSetGamePassTimeLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetGamePassTimeLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetGamePassTimeLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1ae]"></a>DispMenuSetGamePassTimeRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetGamePassTimeRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetGamePassTimeRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1ab]"></a>DispMenuSetGamePassTimeUp</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuSetGamePassTimeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuSetGamePassTimeUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[f4]"></a>DispMenuSetLightsDelayTimeDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetLightsDelayTimeDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[f8]"></a>DispMenuSetLightsDelayTimeEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetLightsDelayTimeEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[f9]"></a>DispMenuSetLightsDelayTimeEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetLightsDelayTimeEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[f7]"></a>DispMenuSetLightsDelayTimeEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetLightsDelayTimeEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[f2]"></a>DispMenuSetLightsDelayTimeInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetLightsDelayTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuSetLightsDelayTimeInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[f5]"></a>DispMenuSetLightsDelayTimeLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetLightsDelayTimeLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetLightsDelayTimeLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[f6]"></a>DispMenuSetLightsDelayTimeRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetLightsDelayTimeRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetLightsDelayTimeRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[f3]"></a>DispMenuSetLightsDelayTimeUp</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetLightsDelayTimeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuSetLightsDelayTimeUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[ec]"></a>DispMenuSetMusicDelayTimeDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetMusicDelayTimeDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[f0]"></a>DispMenuSetMusicDelayTimeEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetMusicDelayTimeEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[f1]"></a>DispMenuSetMusicDelayTimeEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetMusicDelayTimeEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[ef]"></a>DispMenuSetMusicDelayTimeEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetMusicDelayTimeEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[ea]"></a>DispMenuSetMusicDelayTimeInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetMusicDelayTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuSetMusicDelayTimeInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[ed]"></a>DispMenuSetMusicDelayTimeLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetMusicDelayTimeLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetMusicDelayTimeLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[ee]"></a>DispMenuSetMusicDelayTimeRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetMusicDelayTimeRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetMusicDelayTimeRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[eb]"></a>DispMenuSetMusicDelayTimeUp</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetMusicDelayTimeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuSetMusicDelayTimeUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>DispMenuSetNoteDelayTimeDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetNoteDelayTimeDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[120]"></a>DispMenuSetNoteDelayTimeEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetNoteDelayTimeEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>DispMenuSetNoteDelayTimeEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetNoteDelayTimeEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>DispMenuSetNoteDelayTimeEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetNoteDelayTimeEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>DispMenuSetNoteDelayTimeInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetNoteDelayTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuSetNoteDelayTimeInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[11d]"></a>DispMenuSetNoteDelayTimeLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetNoteDelayTimeLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetNoteDelayTimeLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[11e]"></a>DispMenuSetNoteDelayTimeRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetNoteDelayTimeRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetNoteDelayTimeRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[11b]"></a>DispMenuSetNoteDelayTimeUp</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetNoteDelayTimeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuSetNoteDelayTimeUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1dc]"></a>DispMenuSetReturnTopTimeDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetReturnTopTimeDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1e0]"></a>DispMenuSetReturnTopTimeEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetReturnTopTimeEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1e1]"></a>DispMenuSetReturnTopTimeEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetReturnTopTimeEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1df]"></a>DispMenuSetReturnTopTimeEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetReturnTopTimeEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1da]"></a>DispMenuSetReturnTopTimeInit</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetReturnTopTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuSetReturnTopTimeInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1dd]"></a>DispMenuSetReturnTopTimeLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetReturnTopTimeLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetReturnTopTimeLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1de]"></a>DispMenuSetReturnTopTimeRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetReturnTopTimeRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetReturnTopTimeRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1db]"></a>DispMenuSetReturnTopTimeUp</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuSetReturnTopTimeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuSetReturnTopTimeUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[114]"></a>DispMenuSetSyllableDelayTimeDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetSyllableDelayTimeDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[118]"></a>DispMenuSetSyllableDelayTimeEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetSyllableDelayTimeEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>DispMenuSetSyllableDelayTimeEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetSyllableDelayTimeEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>DispMenuSetSyllableDelayTimeEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetSyllableDelayTimeEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[112]"></a>DispMenuSetSyllableDelayTimeInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetSyllableDelayTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuSetSyllableDelayTimeInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[115]"></a>DispMenuSetSyllableDelayTimeLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetSyllableDelayTimeLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetSyllableDelayTimeLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>DispMenuSetSyllableDelayTimeRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetSyllableDelayTimeRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetSyllableDelayTimeRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>DispMenuSetSyllableDelayTimeUp</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetSyllableDelayTimeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuSetSyllableDelayTimeUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[fc]"></a>DispMenuSetTrampleCountTimeDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetTrampleCountTimeDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[100]"></a>DispMenuSetTrampleCountTimeEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetTrampleCountTimeEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[101]"></a>DispMenuSetTrampleCountTimeEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetTrampleCountTimeEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[ff]"></a>DispMenuSetTrampleCountTimeEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetTrampleCountTimeEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[fa]"></a>DispMenuSetTrampleCountTimeInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetTrampleCountTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuSetTrampleCountTimeInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[fd]"></a>DispMenuSetTrampleCountTimeLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetTrampleCountTimeLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetTrampleCountTimeLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[fe]"></a>DispMenuSetTrampleCountTimeRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetTrampleCountTimeRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetTrampleCountTimeRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[fb]"></a>DispMenuSetTrampleCountTimeUp</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetTrampleCountTimeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuSetTrampleCountTimeUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[104]"></a>DispMenuSetTrampleDelayTimeDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetTrampleDelayTimeDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[108]"></a>DispMenuSetTrampleDelayTimeEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetTrampleDelayTimeEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[109]"></a>DispMenuSetTrampleDelayTimeEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetTrampleDelayTimeEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[107]"></a>DispMenuSetTrampleDelayTimeEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetTrampleDelayTimeEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[102]"></a>DispMenuSetTrampleDelayTimeInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetTrampleDelayTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuSetTrampleDelayTimeInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[105]"></a>DispMenuSetTrampleDelayTimeLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetTrampleDelayTimeLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetTrampleDelayTimeLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[106]"></a>DispMenuSetTrampleDelayTimeRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetTrampleDelayTimeRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetTrampleDelayTimeRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[103]"></a>DispMenuSetTrampleDelayTimeUp</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetTrampleDelayTimeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuSetTrampleDelayTimeUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[10c]"></a>DispMenuSetTrampleNumberDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetTrampleNumberDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[110]"></a>DispMenuSetTrampleNumberEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetTrampleNumberEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[111]"></a>DispMenuSetTrampleNumberEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetTrampleNumberEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[10f]"></a>DispMenuSetTrampleNumberEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuSetTrampleNumberEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[10a]"></a>DispMenuSetTrampleNumberInit</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetTrampleNumberInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuSetTrampleNumberInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[10d]"></a>DispMenuSetTrampleNumberLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetTrampleNumberLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetTrampleNumberLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[10e]"></a>DispMenuSetTrampleNumberRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuSetTrampleNumberRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuSetTrampleNumberRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[10b]"></a>DispMenuSetTrampleNumberUp</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuSetTrampleNumberUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuSetTrampleNumberUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[244]"></a>DispMenuT1000_OnOffDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuT1000_OnOffDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[248]"></a>DispMenuT1000_OnOffEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuT1000_OnOffEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[249]"></a>DispMenuT1000_OnOffEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuT1000_OnOffEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[247]"></a>DispMenuT1000_OnOffEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuT1000_OnOffEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[242]"></a>DispMenuT1000_OnOffInit</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, setdevice.o(i.DispMenuT1000_OnOffInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = DispMenuT1000_OnOffInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[245]"></a>DispMenuT1000_OnOffLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuT1000_OnOffLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuT1000_OnOffLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[246]"></a>DispMenuT1000_OnOffRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuT1000_OnOffRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuT1000_OnOffRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuItemSub
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[243]"></a>DispMenuT1000_OnOffUp</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuT1000_OnOffUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuT1000_OnOffUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[254]"></a>DispMenuT1000_TimerDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuT1000_TimerDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[258]"></a>DispMenuT1000_TimerEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuT1000_TimerEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[259]"></a>DispMenuT1000_TimerEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuT1000_TimerEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[257]"></a>DispMenuT1000_TimerEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuT1000_TimerEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[252]"></a>DispMenuT1000_TimerInit</STRONG> (Thumb, 1476 bytes, Stack size 64 bytes, setdevice.o(i.DispMenuT1000_TimerInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = DispMenuT1000_TimerInit &rArr; DisplayPromptInfo &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetEnFont
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeekToChinese
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_T1000_Timer_Text
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[255]"></a>DispMenuT1000_TimerLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuT1000_TimerLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuT1000_TimerLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[256]"></a>DispMenuT1000_TimerRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuT1000_TimerRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuT1000_TimerRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[253]"></a>DispMenuT1000_TimerUp</STRONG> (Thumb, 462 bytes, Stack size 48 bytes, setdevice.o(i.DispMenuT1000_TimerUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = DispMenuT1000_TimerUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[16c]"></a>DispMenuTimeSetDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuTimeSetDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[170]"></a>DispMenuTimeSetEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuTimeSetEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[171]"></a>DispMenuTimeSetEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuTimeSetEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[16f]"></a>DispMenuTimeSetEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuTimeSetEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[16a]"></a>DispMenuTimeSetInit</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuTimeSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DispMenuTimeSetInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[16d]"></a>DispMenuTimeSetLeft</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuTimeSetLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuTimeSetLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[16e]"></a>DispMenuTimeSetRight</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuTimeSetRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuTimeSetRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[16b]"></a>DispMenuTimeSetUp</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuTimeSetUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = DispMenuTimeSetUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[a1]"></a>DispMenuTop</STRONG> (Thumb, 282 bytes, Stack size 40 bytes, menutop.o(i.DispMenuTop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = DispMenuTop &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WeekToChinese
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMainLoop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[a3]"></a>DispMenuTopDown</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, menutop.o(i.DispMenuTopDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = DispMenuTopDown &rArr; DispBuildTime &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Delay
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBuildTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[a7]"></a>DispMenuTopEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menutop.o(i.DispMenuTopEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[a8]"></a>DispMenuTopEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menutop.o(i.DispMenuTopEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>DispMenuTopEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, menutop.o(i.DispMenuTopEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[a4]"></a>DispMenuTopLeft</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menutop.o(i.DispMenuTopLeft))
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[a5]"></a>DispMenuTopRight</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menutop.o(i.DispMenuTopRight))
<BR><BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[a2]"></a>DispMenuTopUp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, menutop.o(i.DispMenuTopUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = DispMenuTopUp &rArr; GUI_Clear &rArr; Display_Clear &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;InitMenuVal
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1b4]"></a>DispMenuVoicePromptTimeDown</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuVoicePromptTimeDown))
<BR><BR>[Calls]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1b8]"></a>DispMenuVoicePromptTimeEscDown</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuVoicePromptTimeEscDown))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1b9]"></a>DispMenuVoicePromptTimeEscOk</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuVoicePromptTimeEscOk))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1b7]"></a>DispMenuVoicePromptTimeEscUp</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, setdevice.o(i.DispMenuVoicePromptTimeEscUp))
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1b2]"></a>DispMenuVoicePromptTimeInit</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, setdevice.o(i.DispMenuVoicePromptTimeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = DispMenuVoicePromptTimeInit &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1b5]"></a>DispMenuVoicePromptTimeLeft</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuVoicePromptTimeLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuVoicePromptTimeLeft
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetAdd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1b6]"></a>DispMenuVoicePromptTimeRight</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, setdevice.o(i.DispMenuVoicePromptTimeRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DispMenuVoicePromptTimeRight
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetCursorRightMoves
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[1b3]"></a>DispMenuVoicePromptTimeUp</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, setdevice.o(i.DispMenuVoicePromptTimeUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = DispMenuVoicePromptTimeUp &rArr; DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> menufsm.o(.constdata)
</UL>
<P><STRONG><a name="[2dc]"></a>DisplayPromptInfo</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, setdevice.o(i.DisplayPromptInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DisplayPromptInfo &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerUp
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerInit
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalUp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressUp
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumUp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetUp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetUp
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetUp
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetInit
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetUp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerUp
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerInit
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetUp
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetUp
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetInit
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetUp
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetInit
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetUp
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetInit
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetUp
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetInit
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetUp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevUp
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetUp
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetInit
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalUp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalUp
</UL>

<P><STRONG><a name="[2dd]"></a>DisplaySuccessFailure</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, setdevice.o(i.DisplaySuccessFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = DisplaySuccessFailure &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PUSH
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;POP
</UL>
<BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerUp
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_OnOffUp
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberUp
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeUp
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeUp
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeUp
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeUp
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeUp
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeUp
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeUp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeUp
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalUp
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressUp
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumUp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSelectUp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetUp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetUp
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetUp
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMusicStatusSetUp
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetUp
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerUp
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_OnOffUp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsStatusSetUp
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpeedSetUp
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetUp
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsModeSetUp
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetUp
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetUp
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetUp
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetUp
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameSelectUp
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSelectUp
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetUp
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFactorySetUp
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetUp
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetUp
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetUp
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_S_DevUp
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuColorOrderSetUp
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCleanRankingDataUp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChipTypeSetUp
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetUp
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalUp
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalUp
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeUp
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetUp
</UL>

<P><STRONG><a name="[2f5]"></a>Display_ASCII</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, ks0108.o(i.Display_ASCII))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Display_ASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
</UL>

<P><STRONG><a name="[2f6]"></a>Display_ASCII_UnderLine</STRONG> (Thumb, 226 bytes, Stack size 32 bytes, ks0108.o(i.Display_ASCII_UnderLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Display_ASCII_UnderLine &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
</UL>

<P><STRONG><a name="[2f7]"></a>Display_Chinese</STRONG> (Thumb, 310 bytes, Stack size 32 bytes, ks0108.o(i.Display_Chinese))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
</UL>

<P><STRONG><a name="[2f8]"></a>Display_Clear</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, ks0108.o(i.Display_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Display_Clear &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_0108
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand_0108
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS0108_SetStartRow
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>

<P><STRONG><a name="[2fd]"></a>Display_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, ks0108.o(i.Display_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Display_Init &rArr; KS0108_SetStartRow &rArr; WriteCommand_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS0108_SetStartRow
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS0108_DisplayOn
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
</UL>

<P><STRONG><a name="[2ff]"></a>Display_InvASCII</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, ks0108.o(i.Display_InvASCII))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
</UL>

<P><STRONG><a name="[2b0]"></a>Display_Locate</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ks0108.o(i.Display_Locate))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_0108
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand_0108
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DrawIcon
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_InvASCII
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chinese
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ASCII_UnderLine
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ASCII
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
</UL>

<P><STRONG><a name="[300]"></a>EepromDataInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, 24cxx.o(i.EepromDataInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = EepromDataInit &rArr; ResetParametersData &rArr; LodeParametersData &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetParametersData
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromVerify
</UL>

<P><STRONG><a name="[28c]"></a>EepromVerify</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, 24cxx.o(i.EepromVerify))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = EepromVerify &rArr; EepromDataInit &rArr; ResetParametersData &rArr; LodeParametersData &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDataInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[301]"></a>Error_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[302]"></a>FATFS_LinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_LinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FATFS_LinkDriver &rArr; FATFS_LinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_u_disk
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_sd
</UL>

<P><STRONG><a name="[303]"></a>FATFS_LinkDriverEx</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, ff_gen_drv.o(i.FATFS_LinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FATFS_LinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
</UL>

<P><STRONG><a name="[304]"></a>FATFS_UnLinkDriver</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ff_gen_drv.o(i.FATFS_UnLinkDriver))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FATFS_UnLinkDriver &rArr; FATFS_UnLinkDriverEx
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_UnLinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_u_disk
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_sd
</UL>

<P><STRONG><a name="[305]"></a>FATFS_UnLinkDriverEx</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, ff_gen_drv.o(i.FATFS_UnLinkDriverEx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FATFS_UnLinkDriverEx
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_UnLinkDriver
</UL>

<P><STRONG><a name="[306]"></a>FIndDevice</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, app.o(i.FIndDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = FIndDevice &rArr; PostDeviceMsg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostDeviceMsg
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MidiPlay
</UL>

<P><STRONG><a name="[392]"></a>FindRowsDeviceId</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, game.o(i.FindRowsDeviceId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FindRowsDeviceId
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode5_Lights_x_1
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode5_Lights_1_x
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
</UL>

<P><STRONG><a name="[2c6]"></a>GUI_Clear</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ks0108.o(i.GUI_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_Clear &rArr; Display_Clear &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTop
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerInit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_OnOffInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumInit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSetInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSelectUp
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSelectInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuParaInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMusicStatusSetInit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMeasureUp
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMeasureInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerInit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_OnOffInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsStatusSetInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpeedSetInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsModeSetInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedControlSetInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetInit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetInit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLanguageUp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLanguageInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameSelectUp
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameSelectInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSetInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSelectUp
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSelectInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFuncInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightSetInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFactorySetInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetInit
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_S_DevInit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevInit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevFailInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuColorOrderSetUp
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuColorOrderSetInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuClockSetInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCleanRankingDataInit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChipTypeSetUp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChipTypeSetInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuBabyModeSetInit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuAboutInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuUp
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeInit
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTopUp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTopDown
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTimr1Callback
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDevStatus
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDev
</UL>

<P><STRONG><a name="[2ec]"></a>GUI_Delay</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ks0108.o(i.GUI_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLanguageUp
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTopDown
</UL>

<P><STRONG><a name="[2b2]"></a>GUI_DispCharAt</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ks0108.o(i.GUI_DispCharAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_InvASCII
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ASCII_UnderLine
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ASCII
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chinese
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>

<P><STRONG><a name="[2d7]"></a>GUI_DispStringAt</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ks0108.o(i.GUI_DispStringAt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_InvASCII
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chinese
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ASCII_UnderLine
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ASCII
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetInit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetInit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetInit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevFailInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetInit
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispBuildTime
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeInit
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>

<P><STRONG><a name="[2b4]"></a>GUI_DispStringAtBar</STRONG> (Thumb, 400 bytes, Stack size 40 bytes, ks0108.o(i.GUI_DispStringAtBar))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetEnFont
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_InvASCII
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Chinese
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ASCII_UnderLine
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_ASCII
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTop
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerInit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_OnOffInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumInit
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSetInit
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSelectInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetInit
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuParaInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMusicStatusSetInit
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMeasureInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerInit
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_OnOffInit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsStatusSetInit
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpeedSetInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetInit
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsModeSetInit
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedControlSetInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetInit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetInit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetInit
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLanguageInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetInit
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameSelectInit
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSetInit
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSelectInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFuncInit
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightSetInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetInit
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFactorySetInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetInit
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_S_DevInit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevInit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevFailInit
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuColorOrderSetInit
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuClockSetInit
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCleanRankingDataInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChipTypeSetInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuBabyModeSetInit
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuAboutInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuRight
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuLeft
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuInit
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDisp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetInit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDevStatus
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDev
</UL>

<P><STRONG><a name="[2d8]"></a>GUI_DrawIcon</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ks0108.o(i.GUI_DrawIcon))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = GUI_DrawIcon &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuRight
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuLeft
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuInit
</UL>

<P><STRONG><a name="[308]"></a>GUI_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, ks0108.o(i.GUI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = GUI_Init &rArr; Display_Init &rArr; KS0108_SetStartRow &rArr; WriteCommand_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
</UL>

<P><STRONG><a name="[2b1]"></a>GUI_SetEnFont</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, ks0108.o(i.GUI_SetEnFont))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GUI_SetEnFont
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetInit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetInit
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAtBar
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Bar
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>

<P><STRONG><a name="[2b5]"></a>GUI_SetTextMode</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ks0108.o(i.GUI_SetTextMode))
<BR><BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetInit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetInit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevFailInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetInit
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarDisp
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetDisplsy
</UL>

<P><STRONG><a name="[309]"></a>GameEnd</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, game.o(i.GameEnd))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = GameEnd &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_Play
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
</UL>

<P><STRONG><a name="[30b]"></a>GameFailure</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, game.o(i.GameFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = GameFailure &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_Play
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
</UL>

<P><STRONG><a name="[30c]"></a>GameRankingCmp</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, game.o(i.GameRankingCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = GameRankingCmp &rArr; SequenListCompare &rArr; SequenListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenListCompare
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
</UL>

<P><STRONG><a name="[2df]"></a>GameRankingDataClean</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, game.o(i.GameRankingDataClean))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = GameRankingDataClean &rArr; LodeParametersData &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodeParametersData
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCleanRankingDataUp
</UL>

<P><STRONG><a name="[30e]"></a>GameRankingDataSave</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, game.o(i.GameRankingDataSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = GameRankingDataSave &rArr; AT24CXX_Write &rArr; AT24CXX_WriteOneByte &rArr; IIC_Wait_Ack &rArr; set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
</UL>

<P><STRONG><a name="[477]"></a>GetSDOClientFromNodeId</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, sdo.o(i.GetSDOClientFromNodeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetSDOClientFromNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteResultNetworkDict
</UL>

<P><STRONG><a name="[92]"></a>GuardTimeAlarm</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lifegrd.o(i.GuardTimeAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = GuardTimeAlarm &rArr; masterSendNMTnodeguard &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTnodeguard
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(i.nodeguardInit)
</UL>
<P><STRONG><a name="[484]"></a>HAL_CAN_ConfigFilter</STRONG> (Thumb, 218 bytes, Stack size 20 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_ConfigFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = HAL_CAN_ConfigFilter
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[311]"></a>HAL_CAN_DeInit</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_CAN_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[313]"></a>HAL_CAN_Init</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_CAN_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_MspInit
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[312]"></a>HAL_CAN_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_DeInit
</UL>

<P><STRONG><a name="[314]"></a>HAL_CAN_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
</UL>

<P><STRONG><a name="[2bb]"></a>HAL_CAN_Receive</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_CAN_Receive
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[316]"></a>HAL_CAN_Transmit</STRONG> (Thumb, 426 bytes, Stack size 40 bytes, stm32f2xx_hal_can.o(i.HAL_CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>

<P><STRONG><a name="[35d]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, stm32f2xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[317]"></a>HAL_Delay</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, stm32f2xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetPort
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_DriverVBUS
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
</UL>

<P><STRONG><a name="[337]"></a>HAL_GPIO_Init</STRONG> (Thumb, 412 bytes, Stack size 40 bytes, stm32f2xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_detect_gpio_confing
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1000_POWER_GPIO_Config
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_GPIO_Config
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_iic_sda_out
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_iic_sda_in
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_port_out
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Configuration
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_key_GPIO_Configuration
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_reset_key_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;midi_linghts_key_init
</UL>

<P><STRONG><a name="[36e]"></a>HAL_GPIO_ReadPin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_hal_gpio.o(i.HAL_GPIO_ReadPin))
<BR><BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_key_val
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_start_reset_key
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_midi_linghts_key
</UL>

<P><STRONG><a name="[2f9]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Init
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sd_detect_gpio_confing
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1000_POWER_GPIO_Config
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_GPIO_Config
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_iic_sda_in
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_0108
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand_0108
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_AutoLighits
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_reset_key_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;midi_linghts_key_init
</UL>

<P><STRONG><a name="[315]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Transmit
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Receive
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[318]"></a>HAL_HCD_Connect_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_Connect_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HCD_Connect_Callback &rArr; USBH_LL_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[31a]"></a>HAL_HCD_Disconnect_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_Disconnect_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HAL_HCD_Disconnect_Callback &rArr; USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[31c]"></a>HAL_HCD_GetCurrentFrame</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_GetCurrentFrame))
<BR><BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetCurrentFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[31e]"></a>HAL_HCD_GetCurrentSpeed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_GetCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HCD_GetCurrentSpeed &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetHostSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetSpeed
</UL>

<P><STRONG><a name="[44a]"></a>HAL_HCD_HC_GetURBState</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_HC_GetURBState))
<BR><BR>[Called By]<UL><LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
</UL>

<P><STRONG><a name="[448]"></a>HAL_HCD_HC_GetXferCount</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_HC_GetXferCount))
<BR><BR>[Called By]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetLastXferSize
</UL>

<P><STRONG><a name="[320]"></a>HAL_HCD_HC_Halt</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ClosePipe
</UL>

<P><STRONG><a name="[322]"></a>HAL_HCD_HC_Init</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_OpenPipe
</UL>

<P><STRONG><a name="[367]"></a>HAL_HCD_HC_NotifyURBChange_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_HC_NotifyURBChange_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>

<P><STRONG><a name="[324]"></a>HAL_HCD_HC_SubmitRequest</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_HC_SubmitRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>

<P><STRONG><a name="[326]"></a>HAL_HCD_IRQHandler</STRONG> (Thumb, 300 bytes, Stack size 24 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_HCD_IRQHandler &rArr; HCD_HC_IN_IRQHandler &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_ReadInterrupt
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_RXQLVL_IRQHandler
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_IRQHandler
</UL>

<P><STRONG><a name="[330]"></a>HAL_HCD_Init</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[331]"></a>HAL_HCD_MspInit</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, usbh_conf.o(i.HAL_HCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[338]"></a>HAL_HCD_ResetPort</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_HCD_ResetPort &rArr; USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ResetPort
</UL>

<P><STRONG><a name="[32b]"></a>HAL_HCD_SOF_Callback</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_SOF_Callback))
<BR><BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_IncTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[33b]"></a>HAL_HCD_Start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
</UL>

<P><STRONG><a name="[33e]"></a>HAL_HCD_Stop</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, stm32f2xx_hal_hcd.o(i.HAL_HCD_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_HCD_Stop &rArr; USB_StopHost
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
</UL>
<BR>[Called By]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
</UL>

<P><STRONG><a name="[340]"></a>HAL_IWDG_Init</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, stm32f2xx_hal_iwdg.o(i.HAL_IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
</UL>

<P><STRONG><a name="[298]"></a>HAL_IWDG_Refresh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_hal_iwdg.o(i.HAL_IWDG_Refresh))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>

<P><STRONG><a name="[410]"></a>HAL_IncTick</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f2xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[29f]"></a>HAL_Init</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f2xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[341]"></a>HAL_InitTick</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f2xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[342]"></a>HAL_MspInit</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f2xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[2d5]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_init
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_NVIC_Configuration
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_NVIC_Configuration
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_start
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[2d4]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, stm32f2xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_init
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_NVIC_Configuration
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_NVIC_Configuration
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_start
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[2d3]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Configuration
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_NVIC_Configuration
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_NVIC_Configuration
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_start
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canInit
</UL>

<P><STRONG><a name="[345]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, stm32f2xx_hal_rcc_ex.o(i.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[346]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 292 bytes, Stack size 32 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[412]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[428]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[427]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Called By]<UL><LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[347]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[348]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 730 bytes, Stack size 40 bytes, stm32f2xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[2e8]"></a>HAL_RTC_GetDate</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_GetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetDate
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTop
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetInit
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTimerControl
</UL>

<P><STRONG><a name="[2f2]"></a>HAL_RTC_GetTime</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTop
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetInit
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTimerControl
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
</UL>

<P><STRONG><a name="[34a]"></a>HAL_RTC_Init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[34b]"></a>HAL_RTC_MspInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f2xx_hal_msp.o(i.HAL_RTC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[2ea]"></a>HAL_RTC_SetDate</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_SetDate))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetDate &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetUp
</UL>

<P><STRONG><a name="[2f3]"></a>HAL_RTC_SetTime</STRONG> (Thumb, 228 bytes, Stack size 32 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_RTC_SetTime &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterInitMode
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ByteToBcd2
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Bcd2ToByte
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_WaitForSynchro
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetUp
</UL>

<P><STRONG><a name="[34d]"></a>HAL_RTC_WaitForSynchro</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f2xx_hal_rtc.o(i.HAL_RTC_WaitForSynchro))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RTC_WaitForSynchro
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[34f]"></a>HAL_SPI_Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, stm32f2xx_hal_spi.o(i.HAL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[350]"></a>HAL_SPI_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_spi.o(i.HAL_SPI_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>

<P><STRONG><a name="[351]"></a>HAL_SPI_TransmitReceive</STRONG> (Thumb, 608 bytes, Stack size 40 bytes, stm32f2xx_hal_spi.o(i.HAL_SPI_TransmitReceive))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>

<P><STRONG><a name="[413]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[355]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[343]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f2xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[354]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f2xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[356]"></a>HAL_TIM_Base_DeInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_Base_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_Base_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspDeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>

<P><STRONG><a name="[2d2]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Configuration
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>

<P><STRONG><a name="[357]"></a>HAL_TIM_Base_MspDeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_Base_MspDeInit))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>

<P><STRONG><a name="[358]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_tim.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[35e]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[35a]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_IRQHandler
</UL>

<P><STRONG><a name="[361]"></a>HAL_UART_Init</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[362]"></a>HAL_UART_MspInit</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, stm32f2xx_hal_msp.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[426]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[365]"></a>HAL_UART_Transmit</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendData
</UL>

<P><STRONG><a name="[409]"></a>HAL_UART_Transmit_IT</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.HAL_UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sand_3Byte_MidiCmd
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_SendData
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxLedControlCmd
</UL>

<P><STRONG><a name="[360]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usart1.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = HAL_UART_TxCpltCallback &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[16]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[369]"></a>IIC_Ack</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, iic.o(i.IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Ack &rArr; set_iic_sda_out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_iic_sda_out
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[28b]"></a>IIC_Init</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, iic_cpu.o(i.IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Init
</UL>

<P><STRONG><a name="[36c]"></a>IIC_NAck</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, iic.o(i.IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_NAck &rArr; set_iic_sda_out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_iic_sda_out
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[292]"></a>IIC_Read_Byte</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, iic.o(i.IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = IIC_Read_Byte &rArr; set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_iic_sda_in
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[290]"></a>IIC_Send_Byte</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, iic.o(i.IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = IIC_Send_Byte &rArr; set_iic_sda_out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_iic_sda_out
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[28f]"></a>IIC_Start</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, iic.o(i.IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Start &rArr; set_iic_sda_out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_iic_sda_out
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[293]"></a>IIC_Stop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, iic.o(i.IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = IIC_Stop &rArr; set_iic_sda_out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_iic_sda_out
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[291]"></a>IIC_Wait_Ack</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, iic.o(i.IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = IIC_Wait_Ack &rArr; set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_iic_sda_in
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_ReadOneByte
</UL>

<P><STRONG><a name="[36f]"></a>IWDG_Init</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp.o(i.IWDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IWDG_Init &rArr; HAL_IWDG_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IWDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f4]"></a>InitMenuVal</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, menutop.o(i.InitMenuVal))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTopUp
</UL>

<P><STRONG><a name="[2b9]"></a>Jump2Menu</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, menu.o(i.Jump2Menu))
<BR><BR>[Called By]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerUp
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerRight
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerLeft
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_OnOffUp
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_OnOffRight
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_OnOffLeft
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberUp
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberRight
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberLeft
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeUp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeRight
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeLeft
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeUp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeRight
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeLeft
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeUp
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeRight
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeLeft
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeUp
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeRight
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeLeft
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeUp
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeRight
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeLeft
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeUp
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeRight
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeLeft
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeUp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeRight
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeLeft
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeUp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeRight
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeLeft
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalUp
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalRight
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalLeft
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressUp
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressRight
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressLeft
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumUp
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumRight
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumLeft
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSetUp
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetUp
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetRight
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetLeft
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetUp
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetRight
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetLeft
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuParaUp
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetUp
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetRight
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetLeft
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMusicStatusSetUp
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMusicStatusSetRight
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMusicStatusSetLeft
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetUp
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetRight
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetLeft
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerUp
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerRight
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerLeft
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_OnOffUp
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_OnOffRight
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_OnOffLeft
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsStatusSetUp
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsStatusSetRight
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsStatusSetLeft
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpeedSetUp
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpeedSetRight
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpeedSetLeft
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetUp
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetRight
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetLeft
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsModeSetUp
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsModeSetRight
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsModeSetLeft
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedControlSetUp
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetUp
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetRight
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetLeft
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetUp
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetRight
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetLeft
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetUp
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetRight
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetLeft
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetUp
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetRight
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetLeft
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSetUp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFuncUp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightSetUp
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetUp
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetRight
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetLeft
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFactorySetUp
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetUp
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetRight
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetLeft
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetUp
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetRight
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetLeft
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetUp
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetRight
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetLeft
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_S_DevUp
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevUp
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevRight
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevLeft
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevFailUp
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevFailRight
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevFailLeft
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevFailDown
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuClockSetUp
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCleanRankingDataUp
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetUp
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetRight
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetLeft
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalUp
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalRight
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalLeft
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalUp
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalRight
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalLeft
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuBabyModeSetUp
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuUp
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuRight
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuLeft
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuRight
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuLeft
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeUp
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeRight
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeLeft
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTopUp
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTopRight
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTopLeft
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTopDown
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetUp
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetRight
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetLeft
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTimr1Callback
</UL>

<P><STRONG><a name="[2a9]"></a>KEY_Init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, key.o(i.KEY_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = KEY_Init &rArr; start_reset_key_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;io_key_GPIO_Configuration
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_reset_key_init
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;midi_linghts_key_init
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[2fe]"></a>KS0108_DisplayOn</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ks0108.o(i.KS0108_DisplayOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KS0108_DisplayOn &rArr; WriteCommand_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand_0108
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
</UL>

<P><STRONG><a name="[2fc]"></a>KS0108_SetStartRow</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ks0108.o(i.KS0108_SetStartRow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = KS0108_SetStartRow &rArr; WriteCommand_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand_0108
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Init
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear
</UL>

<P><STRONG><a name="[4b7]"></a>Key_Type_Change</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, key.o(i.Key_Type_Change))
<BR><BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[373]"></a>Keyboard_21key</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, keyboard.o(i.Keyboard_21key))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = Keyboard_21key &rArr; Sand_3Byte_MidiCmd &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sand_3Byte_MidiCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyzeUartPacket
</UL>

<P><STRONG><a name="[46c]"></a>LCD_DELAY</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ks0108.o(i.LCD_DELAY))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_0108
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand_0108
</UL>

<P><STRONG><a name="[375]"></a>LCD_GPIO_Configuration</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, ks0108_cpu.o(i.LCD_GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_GPIO_Configuration &rArr; set_lcd_port_out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_lcd_port_out
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UI_Init
</UL>

<P><STRONG><a name="[393]"></a>LedColorCycleControl</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ledcontrol.o(i.LedColorCycleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LedColorCycleControl
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyzeUartPacket
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTimr1Callback
</UL>

<P><STRONG><a name="[377]"></a>LedTimerControl</STRONG> (Thumb, 336 bytes, Stack size 48 bytes, ledcontrol.o(i.LedTimerControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LedTimerControl &rArr; HAL_RTC_GetTime
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTimr1Callback
</UL>

<P><STRONG><a name="[378]"></a>LightsMode1</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lights.o(i.LightsMode1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = LightsMode1 &rArr; Lights_1_x &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lights_x_1
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lights_1_x
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lights_control
</UL>

<P><STRONG><a name="[37b]"></a>LightsMode2</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lights.o(i.LightsMode2))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = LightsMode2 &rArr; Lights_min_to_mid_to_max &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lights_min_to_mid_to_max
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lights_min_form_mid_form_max
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lights_control
</UL>

<P><STRONG><a name="[37e]"></a>LightsMode3</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lights.o(i.LightsMode3))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = LightsMode3 &rArr; Mode3_Lights_x_1 &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode3_Lights_x_1
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lights_x_1
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lights_1_x
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lights_control
</UL>

<P><STRONG><a name="[380]"></a>LightsMode4</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, lights.o(i.LightsMode4))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = LightsMode4 &rArr; Mode4_Lights_x_1 &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lights_colour_select
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode4_Lights_x_1
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode4_Lights_1_x
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lights_control
</UL>

<P><STRONG><a name="[383]"></a>LightsMode5</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, lights.o(i.LightsMode5))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = LightsMode5 &rArr; Mode5_Lights_x_1 &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lights_colour_select
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode5_Lights_x_1
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode5_Lights_1_x
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lights_control
</UL>

<P><STRONG><a name="[379]"></a>Lights_1_x</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lights.o(i.Lights_1_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Lights_1_x &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode3
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode1
</UL>

<P><STRONG><a name="[37c]"></a>Lights_min_form_mid_form_max</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, lights.o(i.Lights_min_form_mid_form_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Lights_min_form_mid_form_max &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode2
</UL>

<P><STRONG><a name="[37d]"></a>Lights_min_to_mid_to_max</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lights.o(i.Lights_min_to_mid_to_max))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Lights_min_to_mid_to_max &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode2
</UL>

<P><STRONG><a name="[37a]"></a>Lights_x_1</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lights.o(i.Lights_x_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Lights_x_1 &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode3
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode1
</UL>

<P><STRONG><a name="[2a2]"></a>LodeParametersData</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, parameters.o(i.LodeParametersData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = LodeParametersData &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResetParametersData
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameRankingDataClean
</UL>

<P><STRONG><a name="[2a5]"></a>MX_GPIO_Init</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MX_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[2a7]"></a>MX_USART2_UART_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, usart2.o(i.MX_USART2_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = MX_USART2_UART_Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM7_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[2a6]"></a>MX_USB_HOST_Init</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, usb_host.o(i.MX_USB_HOST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MX_USB_HOST_Init &rArr; USBH_Init &rArr; USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RegisterClass
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[38b]"></a>MX_USB_HOST_Process</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usb_host.o(i.MX_USB_HOST_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = MX_USB_HOST_Process &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_disk_detect
</UL>

<P><STRONG><a name="[6f]"></a>Master_heartbeatError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopenobjdictconfig.o(i.Master_heartbeatError))
<BR>[Address Reference Count : 1]<UL><LI> canopenobjdictconfig.o(i.CANOpenMasterInit)
</UL>
<P><STRONG><a name="[70]"></a>Master_initialisation</STRONG> (Thumb, 232 bytes, Stack size 72 bytes, canopenobjdictconfig.o(i.Master_initialisation))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Master_initialisation &rArr; _setODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopenobjdictconfig.o(i.CANOpenMasterInit)
</UL>
<P><STRONG><a name="[72]"></a>Master_operational</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, canopenobjdictconfig.o(i.Master_operational))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Master_operational &rArr; startSYNC &rArr; stopSYNC &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopenobjdictconfig.o(i.CANOpenMasterInit)
</UL>
<P><STRONG><a name="[77]"></a>Master_post_SlaveBootup</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canopenobjdictconfig.o(i.Master_post_SlaveBootup))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Master_post_SlaveBootup &rArr; masterSendNMTstateChange &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTstateChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopenobjdictconfig.o(i.CANOpenMasterInit)
</UL>
<P><STRONG><a name="[78]"></a>Master_post_SlaveStateChange</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, canopenobjdictconfig.o(i.Master_post_SlaveStateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = Master_post_SlaveStateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> canopenobjdictconfig.o(i.CANOpenMasterInit)
</UL>
<P><STRONG><a name="[75]"></a>Master_post_TPDO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopenobjdictconfig.o(i.Master_post_TPDO))
<BR>[Address Reference Count : 1]<UL><LI> canopenobjdictconfig.o(i.CANOpenMasterInit)
</UL>
<P><STRONG><a name="[76]"></a>Master_post_emcy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopenobjdictconfig.o(i.Master_post_emcy))
<BR>[Address Reference Count : 1]<UL><LI> canopenobjdictconfig.o(i.CANOpenMasterInit)
</UL>
<P><STRONG><a name="[74]"></a>Master_post_sync</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopenobjdictconfig.o(i.Master_post_sync))
<BR>[Address Reference Count : 1]<UL><LI> canopenobjdictconfig.o(i.CANOpenMasterInit)
</UL>
<P><STRONG><a name="[71]"></a>Master_preOperational</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopenobjdictconfig.o(i.Master_preOperational))
<BR>[Address Reference Count : 1]<UL><LI> canopenobjdictconfig.o(i.CANOpenMasterInit)
</UL>
<P><STRONG><a name="[73]"></a>Master_stopped</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, canopenobjdictconfig.o(i.Master_stopped))
<BR>[Address Reference Count : 1]<UL><LI> canopenobjdictconfig.o(i.CANOpenMasterInit)
</UL>
<P><STRONG><a name="[17]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[2e0]"></a>MenuItemAdd</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, setdevice.o(i.MenuItemAdd))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_OnOffLeft
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMusicStatusSetLeft
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_OnOffLeft
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsStatusSetLeft
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpeedSetLeft
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsModeSetLeft
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevFailLeft
</UL>

<P><STRONG><a name="[2e1]"></a>MenuItemSub</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, setdevice.o(i.MenuItemSub))
<BR><BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_OnOffRight
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMusicStatusSetRight
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_OnOffRight
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsStatusSetRight
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpeedSetRight
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsModeSetRight
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevFailRight
</UL>

<P><STRONG><a name="[391]"></a>MenuMainLoop</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, menumain.o(i.MenuMainLoop))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = MenuMainLoop &rArr; DispMenuTop &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTop
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTimr1Callback
</UL>

<P><STRONG><a name="[37f]"></a>Mode3_Lights_x_1</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lights.o(i.Mode3_Lights_x_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = Mode3_Lights_x_1 &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode3
</UL>

<P><STRONG><a name="[382]"></a>Mode4_Lights_1_x</STRONG> (Thumb, 228 bytes, Stack size 16 bytes, lights.o(i.Mode4_Lights_1_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = Mode4_Lights_1_x &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode4
</UL>

<P><STRONG><a name="[381]"></a>Mode4_Lights_x_1</STRONG> (Thumb, 214 bytes, Stack size 16 bytes, lights.o(i.Mode4_Lights_x_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = Mode4_Lights_x_1 &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode4
</UL>

<P><STRONG><a name="[385]"></a>Mode5_Lights_1_x</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, lights.o(i.Mode5_Lights_1_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Mode5_Lights_1_x &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindRowsDeviceId
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode5
</UL>

<P><STRONG><a name="[384]"></a>Mode5_Lights_x_1</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lights.o(i.Mode5_Lights_x_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = Mode5_Lights_x_1 &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindRowsDeviceId
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode5
</UL>

<P><STRONG><a name="[88]"></a>MyTimr1Callback</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, app.o(i.MyTimr1Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = MyTimr1Callback &rArr; MenuMainLoop &rArr; DispMenuTop &rArr; GUI_DispStringAtBar &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedColorCycleControl
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Jump2Menu
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MenuMainLoop
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedTimerControl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.Task_Start)
</UL>
<P><STRONG><a name="[8b]"></a>MyTimr2Callback</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, app.o(i.MyTimr2Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = MyTimr2Callback &rArr; SimulateGameFailure &rArr; Post_GAME_RX_Msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateGameFailure
</UL>
<BR>[Address Reference Count : 1]<UL><LI> game1.o(i.game1)
</UL>
<P><STRONG><a name="[15]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[395]"></a>OSFlagAccept</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, os_flag.o(i.OSFlagAccept))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSFlagAccept
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyzeUartPacket
</UL>

<P><STRONG><a name="[398]"></a>OSFlagCreate</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, os_flag.o(i.OSFlagCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSFlagCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[2ce]"></a>OSFlagPend</STRONG> (Thumb, 358 bytes, Stack size 72 bytes, os_flag.o(i.OSFlagPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagBlock
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sand_3Byte_MidiCmd
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressUp
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_SendData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_XFS5152CE_Play
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GameVoicePrompt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Game
<LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxLedControlCmd
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDev
</UL>

<P><STRONG><a name="[29b]"></a>OSFlagPost</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, os_flag.o(i.OSFlagPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_u_disk
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_sd
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_u_disk
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_sd
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanOnlineDevice
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMidiFile
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLightsDelay
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_ReturnStatus
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_Play
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyzeUartPacket
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressUp
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetUp
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_SendData
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_XFS5152CE_Play
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GameVoicePrompt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Game
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPlayDelay
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameFailure
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameEnd
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_start_reset_key
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_midi_linghts_key
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetOk
</UL>

<P><STRONG><a name="[29a]"></a>OSFlagQuery</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, os_flag.o(i.OSFlagQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSFlagQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanOnlineDevice
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLightsDelay
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_XFS5152CE_Play
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MidiPlay
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GameVoicePrompt
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_AutoLighits
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIndDevice
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPlayDelay
</UL>

<P><STRONG><a name="[39d]"></a>OSInit</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, os_core.o(i.OSInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = OSInit &rArr; OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookEnd
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInitHookBegin
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[39e]"></a>OSInitHookBegin</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookBegin))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3a6]"></a>OSInitHookEnd</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSInitHookEnd))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[411]"></a>OSIntEnter</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(i.OSIntEnter))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3a7]"></a>OSIntExit</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_core.o(i.OSIntExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSIntExit
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntCtxSw
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3aa]"></a>OSQCreate</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, os_q.o(i.OSQCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSQCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
</UL>

<P><STRONG><a name="[2e6]"></a>OSQFlush</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, os_q.o(i.OSQFlush))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSQFlush
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetUp
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
</UL>

<P><STRONG><a name="[2e7]"></a>OSQPend</STRONG> (Thumb, 208 bytes, Stack size 32 bytes, os_q.o(i.OSQPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetUp
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MidiPlay
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LedControl
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
</UL>

<P><STRONG><a name="[3ae]"></a>OSQPost</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, os_q.o(i.OSQPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostDeviceMsg
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post_XFS5152CE_RX_Msg
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post_GAME_RX_Msg
</UL>

<P><STRONG><a name="[3b0]"></a>OSSchedLock</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(i.OSSchedLock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSSchedLock
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[3b1]"></a>OSSchedUnlock</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, os_core.o(i.OSSchedUnlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[3b2]"></a>OSSemCreate</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, os_sem.o(i.OSSemCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemCreate
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventWaitListInit
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[3b3]"></a>OSSemPend</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, os_sem.o(i.OSSemPend))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskWait
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_XFS5152CE_Play
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[3b4]"></a>OSSemPost</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_sem.o(i.OSSemPost))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_ReturnStatus
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_Play
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>

<P><STRONG><a name="[3b5]"></a>OSSemQuery</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, os_sem.o(i.OSSemQuery))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSSemQuery
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_XFS5152CE_Play
</UL>

<P><STRONG><a name="[3b6]"></a>OSSemSet</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, os_sem.o(i.OSSemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSSemSet
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_XFS5152CE_Play
</UL>

<P><STRONG><a name="[3b7]"></a>OSStart</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, os_core.o(i.OSStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = OSStart
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStartHighRdy
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3b9]"></a>OSTCBInitHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTCBInitHook))
<BR><BR>[Calls]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[3bb]"></a>OSTaskCreate</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, os_task.o(i.OSTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3a3]"></a>OSTaskCreateExt</STRONG> (Thumb, 144 bytes, Stack size 64 bytes, os_task.o(i.OSTaskCreateExt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkInit
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStkClr
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[3bf]"></a>OSTaskCreateHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskCreateHook))
<BR><BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskCreateHook
</UL>
<BR>[Called By]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TCBInit
</UL>

<P><STRONG><a name="[3c1]"></a>OSTaskIdleHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskIdleHook))
<BR><BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskIdleHook
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskIdle
</UL>

<P><STRONG><a name="[3a4]"></a>OSTaskNameSet</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, os_task.o(i.OSTaskNameSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OSTaskNameSet
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
</UL>

<P><STRONG><a name="[3c2]"></a>OSTaskStatHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStatHook))
<BR><BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskStatHook
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[3c4]"></a>OSTaskStkChk</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, os_task.o(i.OSTaskStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>

<P><STRONG><a name="[3bc]"></a>OSTaskStkInit</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskStkInit))
<BR><BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[3c5]"></a>OSTaskSuspend</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, os_task.o(i.OSTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTaskSuspend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[6e]"></a>OSTaskSwHook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, os_cpu_c.o(i.OSTaskSwHook))
<BR><BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TaskSwHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_cpu_a.o(.text)
</UL>
<P><STRONG><a name="[386]"></a>OSTimeDly</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, os_time.o(i.OSTimeDly))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode5
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Mco_Rx
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[2c9]"></a>OSTimeDlyHMSM</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, os_time.o(i.OSTimeDlyHMSM))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTimeDlyHMSM &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode4_Lights_x_1
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode4_Lights_1_x
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode4
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode3
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode2
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode1
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyzeUartPacket
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scan
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MidiPlay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Mco_Rx
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GameVoicePrompt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Game
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Display
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_AutoLighits
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplayPromptInfo
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDevTimeOut
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDevStatus
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDev
</UL>

<P><STRONG><a name="[3c7]"></a>OSTimeTick</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, os_core.o(i.OSTimeTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[3c8]"></a>OSTimeTickHook</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, os_cpu_c.o(i.OSTimeTickHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_TimeTickHook
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrSignal
</UL>
<BR>[Called By]<UL><LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
</UL>

<P><STRONG><a name="[3cb]"></a>OSTmrCreate</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, os_tmr.o(i.OSTmrCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OSTmrCreate &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
</UL>

<P><STRONG><a name="[3ca]"></a>OSTmrSignal</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, os_tmr.o(i.OSTmrSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTickHook
</UL>

<P><STRONG><a name="[3cc]"></a>OSTmrStart</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, os_tmr.o(i.OSTmrStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OSTmrStart &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Start
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
</UL>

<P><STRONG><a name="[3cf]"></a>OSTmrStop</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, os_tmr.o(i.OSTmrStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OSTmrStop &rArr; OSSchedUnlock &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
</UL>

<P><STRONG><a name="[3a5]"></a>OSTmr_Init</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, os_tmr.o(i.OSTmr_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = OSTmr_Init &rArr; OSTaskCreateExt &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskNameSet
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3af]"></a>OS_EventTaskRdy</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, os_core.o(i.OS_EventTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>

<P><STRONG><a name="[3ad]"></a>OS_EventTaskRemove</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, os_core.o(i.OS_EventTaskRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_EventTaskRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_EventTaskRdy
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[3ac]"></a>OS_EventTaskWait</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, os_core.o(i.OS_EventTaskWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OS_EventTaskWait
</UL>
<BR>[Called By]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[3ab]"></a>OS_EventWaitListInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, os_core.o(i.OS_EventWaitListInit))
<BR><BR>[Called By]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
</UL>

<P><STRONG><a name="[3a1]"></a>OS_FlagInit</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, os_flag.o(i.OS_FlagInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_FlagInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[39b]"></a>OS_FlagUnlink</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os_flag.o(i.OS_FlagUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagTaskRdy
</UL>

<P><STRONG><a name="[3a0]"></a>OS_MemClr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, os_core.o(i.OS_MemClr))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_QInit
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagInit
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Init
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitTCBList
</UL>

<P><STRONG><a name="[3a2]"></a>OS_QInit</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_q.o(i.OS_QInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_QInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[39a]"></a>OS_Sched</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, os_core.o(i.OS_Sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSCtxSw
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_SchedNew
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>

<P><STRONG><a name="[3bd]"></a>OS_TCBInit</STRONG> (Thumb, 220 bytes, Stack size 40 bytes, os_core.o(i.OS_TCBInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateHook
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTCBInitHook
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[7b]"></a>OS_TaskIdle</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskIdle))
<BR><BR>[Calls]<UL><LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskIdleHook
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OSInit)
</UL>
<P><STRONG><a name="[7c]"></a>OS_TaskStat</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, os_core.o(i.OS_TaskStat))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TaskStat &rArr; OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskSuspend
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStatHook
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStatStkChk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_core.o(i.OSInit)
</UL>
<P><STRONG><a name="[3d1]"></a>OS_TaskStatStkChk</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, os_core.o(i.OS_TaskStatStkChk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_TaskStatStkChk &rArr; OSTaskStkChk
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskStkChk
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_TaskStat
</UL>

<P><STRONG><a name="[3be]"></a>OS_TaskStkClr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, os_task.o(i.OS_TaskStkClr))
<BR><BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreateExt
</UL>

<P><STRONG><a name="[5f]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.OTG_FS_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.OTG_HS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OTG_HS_IRQHandler &rArr; HAL_HCD_IRQHandler &rArr; HCD_HC_IN_IRQHandler &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ObjDict_scanIndexOD</STRONG> (Thumb, 428 bytes, Stack size 12 bytes, objdict.o(i.ObjDict_scanIndexOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ObjDict_scanIndexOD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>ObjDict_valueRangeTest</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, objdict.o(i.ObjDict_valueRangeTest))
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[95]"></a>OnCOB_ID_SyncUpdate</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sync.o(i.OnCOB_ID_SyncUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OnCOB_ID_SyncUpdate &rArr; startSYNC &rArr; stopSYNC &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync.o(i.startSYNC)
</UL>
<P><STRONG><a name="[8c]"></a>OnHeartbeatProducerUpdate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lifegrd.o(i.OnHeartbeatProducerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = OnHeartbeatProducerUpdate &rArr; heartbeatInit &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(i.heartbeatInit)
</UL>
<P><STRONG><a name="[91]"></a>OnNodeGuardUpdate</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lifegrd.o(i.OnNodeGuardUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OnNodeGuardUpdate &rArr; nodeguardInit &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardStop
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(i.nodeguardInit)
</UL>
<P><STRONG><a name="[8a]"></a>OnNumberOfErrorsUpdate</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, emcy.o(i.OnNumberOfErrorsUpdate))
<BR>[Address Reference Count : 1]<UL><LI> emcy.o(i.emergencyInit)
</UL>
<P><STRONG><a name="[93]"></a>PDOEventTimerAlarm</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pdo.o(i.PDOEventTimerAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDO_Communication_Parameter_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(i.sendOnePDOevent)
</UL>
<P><STRONG><a name="[94]"></a>PDOInhibitTimerAlarm</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pdo.o(i.PDOInhibitTimerAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = PDOInhibitTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(i.sendOnePDOevent)
</UL>
<P><STRONG><a name="[3d7]"></a>PDOInit</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, pdo.o(i.PDOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanIndexOD
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[3da]"></a>PDOStop</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, pdo.o(i.PDOStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PDOStop
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[2d0]"></a>POP</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, menutop.o(i.POP))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetDown
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerDown
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_OnOffDown
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberDown
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeDown
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeDown
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeDown
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeDown
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeDown
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeDown
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeDown
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeDown
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalDown
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressDown
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumDown
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSetDown
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSelectUp
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSelectDown
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetDown
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetDown
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuParaDown
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetDown
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMusicStatusSetDown
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMeasureUp
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMeasureDown
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetDown
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerDown
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_OnOffDown
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsStatusSetDown
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpeedSetDown
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetDown
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsModeSetDown
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedControlSetDown
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetDown
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetDown
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetDown
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLanguageUp
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLanguageDown
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetDown
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameSelectUp
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameSelectDown
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSetDown
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSelectUp
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSelectDown
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFuncDown
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightSetDown
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetDown
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFactorySetUp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFactorySetDown
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetDown
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetDown
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetDown
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_S_DevUp
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_S_DevDown
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevDown
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuColorOrderSetUp
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuColorOrderSetDown
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuClockSetDown
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCleanRankingDataUp
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCleanRankingDataDown
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChipTypeSetUp
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChipTypeSetDown
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetDown
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalDown
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalDown
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuBabyModeSetDown
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuAboutUp
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuAboutDown
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuDown
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeDown
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDevStatus
</UL>

<P><STRONG><a name="[2b7]"></a>PUSH</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, menutop.o(i.PUSH))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSetUp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSetInit
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSelectUp
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSayModeSelectInit
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuParaUp
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMeasureUp
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedControlSetUp
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedControlSetInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLanguageUp
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLanguageInit
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameSelectUp
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameSelectInit
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSetUp
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSetInit
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSelectUp
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGameModeSelectInit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFuncUp
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightSetUp
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightSetInit
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuColorOrderSetUp
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuColorOrderSetInit
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuClockSetUp
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChipTypeSetUp
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChipTypeSetInit
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuBabyModeSetInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispIcoMenuInit
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BarMenuInit
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisplaySuccessFailure
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDevStatus
</UL>

<P><STRONG><a name="[2da]"></a>ParaSetAdd</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, setdevice.o(i.ParaSetAdd))
<BR><BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerLeft
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberLeft
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeLeft
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeLeft
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeLeft
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeLeft
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeLeft
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeLeft
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeLeft
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeLeft
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalLeft
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressLeft
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumLeft
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetLeft
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetLeft
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetLeft
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetLeft
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerLeft
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetLeft
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetLeft
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetLeft
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetLeft
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetLeft
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetLeft
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetLeft
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetLeft
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetLeft
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevLeft
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetLeft
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalLeft
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalLeft
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeLeft
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetLeft
</UL>

<P><STRONG><a name="[2db]"></a>ParaSetCursorRightMoves</STRONG> (Thumb, 114 bytes, Stack size 0 bytes, setdevice.o(i.ParaSetCursorRightMoves))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerRight
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberRight
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeRight
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeRight
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeRight
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeRight
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeRight
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeRight
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeRight
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeRight
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalRight
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressRight
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumRight
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetRight
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetRight
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetRight
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetRight
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerRight
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetRight
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetRight
<LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetRight
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetRight
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetRight
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetRight
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetRight
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetRight
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevRight
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetRight
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalRight
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalRight
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeRight
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetRight
</UL>

<P><STRONG><a name="[2d9]"></a>ParaSetDisplsy</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, setdevice.o(i.ParaSetDisplsy))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ParaSetDisplsy &rArr; GUI_DispStringAt &rArr; Display_Chinese &rArr; GUI_DispCharAt &rArr; Display_InvASCII &rArr; Display_Locate &rArr; WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetTextMode
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_SetEnFont
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispStringAt
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_DispCharAt
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalInit
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetInit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetInit
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetInit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetInit
</UL>

<P><STRONG><a name="[3db]"></a>ParaSetOk</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, parameters.o(i.ParaSetOk))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = ParaSetOk &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Called By]<UL><LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveParaSet
</UL>

<P><STRONG><a name="[2ed]"></a>ParaSetSub</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, setdevice.o(i.ParaSetSub))
<BR><BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetRight
</UL>

<P><STRONG><a name="[3dc]"></a>ParaUpdate</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, parameters.o(i.ParaUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = ParaUpdate &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyzeUartPacket
</UL>

<P><STRONG><a name="[3dd]"></a>ParseMIDI</STRONG> (Thumb, 1764 bytes, Stack size 128 bytes, mid.o(i.ParseMIDI))
<BR><BR>[Stack]<UL><LI>Max Depth = 968 + Unknown Stack Size
<LI>Call Chain = ParseMIDI &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_us
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScanOnlineDevice
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sand_3Byte_MidiCmd
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStringAndPrint
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDynamicBytes
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMidiPlay
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMidiFile
</UL>

<P><STRONG><a name="[3e3]"></a>PauseMidiPlay</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, mid.o(i.PauseMidiPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = PauseMidiPlay &rArr; Sand_3Byte_MidiCmd &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sand_3Byte_MidiCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMidiFile
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
</UL>

<P><STRONG><a name="[307]"></a>PostDeviceMsg</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app.o(i.PostDeviceMsg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = PostDeviceMsg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_u_disk
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_sd
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_u_disk
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_sd
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MidiPlay
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIndDevice
</UL>

<P><STRONG><a name="[3e7]"></a>Post_GAME_RX_Msg</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, app.o(i.Post_GAME_RX_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = Post_GAME_RX_Msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyzeUartPacket
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimulateGameFailure
</UL>

<P><STRONG><a name="[3e8]"></a>Post_XFS5152CE_RX_Msg</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app.o(i.Post_XFS5152CE_RX_Msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = Post_XFS5152CE_RX_Msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPost
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>ProducerHeartbeatAlarm</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, lifegrd.o(i.ProducerHeartbeatAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ProducerHeartbeatAlarm &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(i.heartbeatInit)
</UL>
<P><STRONG><a name="[2a4]"></a>RESET_GPIO_Config</STRONG> (Thumb, 76 bytes, Stack size 40 bytes, bsp.o(i.RESET_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = RESET_GPIO_Config &rArr; delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[349]"></a>RTC_Bcd2ToByte</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f2xx_hal_rtc.o(i.RTC_Bcd2ToByte))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetDate
</UL>

<P><STRONG><a name="[34e]"></a>RTC_ByteToBcd2</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f2xx_hal_rtc.o(i.RTC_ByteToBcd2))
<BR><BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
</UL>

<P><STRONG><a name="[34c]"></a>RTC_EnterInitMode</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f2xx_hal_rtc.o(i.RTC_EnterInitMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetTime
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_SetDate
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
</UL>

<P><STRONG><a name="[2ae]"></a>RTC_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RTC_Init &rArr; HAL_RTC_Init &rArr; RTC_EnterInitMode
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_Init
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[3e1]"></a>ReadDynamicBytes</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, mid.o(i.ReadDynamicBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ReadDynamicBytes &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
</UL>

<P><STRONG><a name="[3ea]"></a>ReadMidiFile</STRONG> (Thumb, 258 bytes, Stack size 40 bytes, mid.o(i.ReadMidiFile))
<BR><BR>[Stack]<UL><LI>Max Depth = 1008 + Unknown Stack Size
<LI>Call Chain = ReadMidiFile &rArr; ParseMIDI &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMidiPlay
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_MidiPlay
</UL>

<P><STRONG><a name="[3e2]"></a>ReadStringAndPrint</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, mid.o(i.ReadStringAndPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ReadStringAndPrint &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
</UL>

<P><STRONG><a name="[3f3]"></a>RegisterSetODentryCallBack</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, objacces.o(i.RegisterSetODentryCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanIndexOD
</UL>
<BR>[Called By]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
</UL>

<P><STRONG><a name="[2e4]"></a>ResetParametersData</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, parameters.o(i.ResetParametersData))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ResetParametersData &rArr; LodeParametersData &rArr; AT24CXX_Read &rArr; AT24CXX_ReadOneByte &rArr; IIC_Read_Byte &rArr; set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LodeParametersData
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFactorySetUp
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_S_DevUp
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EepromDataInit
</UL>

<P><STRONG><a name="[2e3]"></a>Reset_Read_Inputs_8_Bit</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, ds401.o(i.Reset_Read_Inputs_8_Bit))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevUp
</UL>

<P><STRONG><a name="[8f]"></a>SDOTimeoutAlarm</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, sdo.o(i.SDOTimeoutAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SDOTimeoutAlarm &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sdo.o(i.initSDOline)
<LI> sdo.o(i.proceedSDO)
</UL>
<P><STRONG><a name="[3f5]"></a>SDOlineToObjdict</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, sdo.o(i.SDOlineToObjdict))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SDOlineToObjdict &rArr; _setODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[4bc]"></a>SDOtoLine</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, sdo.o(i.SDOtoLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SDOtoLine
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[3f6]"></a>SD_DisSelect</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, mmc_sd.o(i.SD_DisSelect))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_DisSelect &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Select
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCSD
</UL>

<P><STRONG><a name="[3f8]"></a>SD_GetCSD</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mmc_sd.o(i.SD_GetCSD))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_GetCSD &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetSectorCount
</UL>

<P><STRONG><a name="[3fb]"></a>SD_GetResponse</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, mmc_sd.o(i.SD_GetResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_GetResponse &rArr; SD_SPI_ReadWriteByte &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
</UL>

<P><STRONG><a name="[3fd]"></a>SD_GetSectorCount</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, mmc_sd.o(i.SD_GetSectorCount))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_GetSectorCount &rArr; SD_GetCSD &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCSD
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
</UL>

<P><STRONG><a name="[3fe]"></a>SD_Initialize</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, mmc_sd.o(i.SD_Initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SD_Initialize &rArr; SD_SPI_Init &rArr; SPI1_Init &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Init
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[401]"></a>SD_ReadDisk</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, mmc_sd.o(i.SD_ReadDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SD_ReadDisk &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
</UL>

<P><STRONG><a name="[3fa]"></a>SD_RecvData</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, mmc_sd.o(i.SD_RecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_RecvData &rArr; SD_GetResponse &rArr; SD_SPI_ReadWriteByte &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCSD
</UL>

<P><STRONG><a name="[3ff]"></a>SD_SPI_Init</STRONG> (Thumb, 108 bytes, Stack size 40 bytes, mmc_sd.o(i.SD_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SD_SPI_Init &rArr; SPI1_Init &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[3fc]"></a>SD_SPI_ReadWriteByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mmc_sd.o(i.SD_SPI_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SD_SPI_ReadWriteByte &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReady
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendBlock
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetResponse
</UL>

<P><STRONG><a name="[403]"></a>SD_SPI_SpeedHigh</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mmc_sd.o(i.SD_SPI_SpeedHigh))
<BR><BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[404]"></a>SD_SPI_SpeedLow</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mmc_sd.o(i.SD_SPI_SpeedLow))
<BR><BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_SetSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_read
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_initialize
</UL>

<P><STRONG><a name="[405]"></a>SD_Select</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mmc_sd.o(i.SD_Select))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReady
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
</UL>

<P><STRONG><a name="[407]"></a>SD_SendBlock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mmc_sd.o(i.SD_SendBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SD_SendBlock &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReady
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
</UL>

<P><STRONG><a name="[3f9]"></a>SD_SendCmd</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mmc_sd.o(i.SD_SendCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI1_ReadWriteByte
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Select
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetCSD
</UL>

<P><STRONG><a name="[406]"></a>SD_WaitReady</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, mmc_sd.o(i.SD_WaitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ioctl
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendBlock
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Select
</UL>

<P><STRONG><a name="[408]"></a>SD_WriteDisk</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, mmc_sd.o(i.SD_WriteDisk))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SD_WriteDisk &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendBlock
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_write
</UL>

<P><STRONG><a name="[9c]"></a>SD_initialize</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sd_diskio.o(i.SD_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SD_initialize &rArr; SD_Initialize &rArr; SD_SPI_Init &rArr; SPI1_Init &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedLow
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedHigh
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[a0]"></a>SD_ioctl</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sd_diskio.o(i.SD_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SD_ioctl &rArr; SD_GetSectorCount &rArr; SD_GetCSD &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WaitReady
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_GetSectorCount
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[9e]"></a>SD_read</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sd_diskio.o(i.SD_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SD_read &rArr; SD_ReadDisk &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedLow
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedHigh
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_ReadDisk
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[9d]"></a>SD_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sd_diskio.o(i.SD_status))
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[9f]"></a>SD_write</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, sd_diskio.o(i.SD_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SD_write &rArr; SD_WriteDisk &rArr; SD_SendCmd &rArr; SD_Select &rArr; SD_WaitReady &rArr; SD_SPI_ReadWriteByte &rArr; SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_WriteDisk
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedLow
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedHigh
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sd_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[402]"></a>SPI1_Init</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, spi_hal.o(i.SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SPI1_Init &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_Init
</UL>

<P><STRONG><a name="[3f7]"></a>SPI1_ReadWriteByte</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, spi_hal.o(i.SPI1_ReadWriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SPI1_ReadWriteByte &rArr; HAL_SPI_TransmitReceive &rArr; SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>
<BR>[Called By]<UL><LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_ReadWriteByte
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendCmd
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SendBlock
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_RecvData
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_DisSelect
</UL>

<P><STRONG><a name="[400]"></a>SPI1_SetSpeed</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, spi_hal.o(i.SPI1_SetSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedLow
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_SPI_SpeedHigh
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SD_Initialize
</UL>

<P><STRONG><a name="[1a]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[374]"></a>Sand_3Byte_MidiCmd</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, mid.o(i.Sand_3Byte_MidiCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = Sand_3Byte_MidiCmd &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>
<BR>[Called By]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PauseMidiPlay
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_21key
</UL>

<P><STRONG><a name="[3e5]"></a>ScanOnlineDevice</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, mid.o(i.ScanOnlineDevice))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = ScanOnlineDevice &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
</UL>

<P><STRONG><a name="[30d]"></a>SequenListCompare</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, game.o(i.SequenListCompare))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SequenListCompare &rArr; SequenListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenListInsert
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameRankingCmp
</UL>

<P><STRONG><a name="[40b]"></a>SequenListDelete</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, game.o(i.SequenListDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SequenListDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenListCompare
</UL>

<P><STRONG><a name="[40a]"></a>SequenListInsert</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, game.o(i.SequenListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SequenListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SequenListCompare
</UL>

<P><STRONG><a name="[40c]"></a>SetAlarm</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, timer.o(i.SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
</UL>

<P><STRONG><a name="[2bc]"></a>SetCanHandle</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, canopenobjdictconfig.o(i.SetCanHandle))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDev
</UL>

<P><STRONG><a name="[394]"></a>SimulateGameFailure</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, usart1.o(i.SimulateGameFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = SimulateGameFailure &rArr; Post_GAME_RX_Msg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post_GAME_RX_Msg
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MyTimr2Callback
</UL>

<P><STRONG><a name="[40e]"></a>SlaveParaSet</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, parameters.o(i.SlaveParaSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = SlaveParaSet &rArr; ParaSetOk &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaSetOk
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyzeUartPacket
</UL>

<P><STRONG><a name="[96]"></a>SyncAlarm</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sync.o(i.SyncAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = SyncAlarm &rArr; sendSYNC &rArr; proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync.o(i.startSYNC)
</UL>
<P><STRONG><a name="[1d]"></a>SysTick_Handler</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, stm32f2xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; OSTimeTick &rArr; OSTimeTickHook &rArr; OSTmrSignal &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeTick
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[2a0]"></a>SystemClock_Config</STRONG> (Thumb, 160 bytes, Stack size 104 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_RCC_GetSysClockFreq &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[6c]"></a>SystemInit</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, system_stm32f2xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(.text)
</UL>
<P><STRONG><a name="[2a3]"></a>T1000_POWER_GPIO_Config</STRONG> (Thumb, 60 bytes, Stack size 40 bytes, bsp.o(i.T1000_POWER_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = T1000_POWER_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[3a]"></a>TIM2_IRQHandler</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, timr_delay.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = TIM2_IRQHandler &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM4_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, timer_stm32_hal.o(i.TIM4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM4_IRQHandler &rArr; TimeDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[416]"></a>TIM4_start</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, timer_stm32_hal.o(i.TIM4_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIM4_start &rArr; TIM4_Configuration &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initTimer
</UL>

<P><STRONG><a name="[387]"></a>TIM7_Configuration</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, usart2.o(i.TIM7_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TIM7_Configuration &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART2_UART_Init
</UL>

<P><STRONG><a name="[55]"></a>TIM7_IRQHandler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, usart2.o(i.TIM7_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[359]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 156 bytes, Stack size 20 bytes, stm32f2xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[7e]"></a>TPDO_Communication_Parameter_Callback</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, pdo.o(i.TPDO_Communication_Parameter_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = TPDO_Communication_Parameter_Callback &rArr; PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(i.PDOInit)
</UL>
<P><STRONG><a name="[80]"></a>Task_AutoLighits</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, app.o(i.Task_AutoLighits))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = Task_AutoLighits &rArr; lights_control &rArr; LightsMode5 &rArr; Mode5_Lights_x_1 &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lights_control
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.Task_Start)
</UL>
<P><STRONG><a name="[81]"></a>Task_Display</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, app.o(i.Task_Display))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = Task_Display &rArr; CheckKey &rArr; key_scan &rArr; get_io_key_val
</UL>
<BR>[Calls]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.Task_Start)
</UL>
<P><STRONG><a name="[83]"></a>Task_Game</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, app.o(i.Task_Game))
<BR><BR>[Stack]<UL><LI>Max Depth = 420 + Unknown Stack Size
<LI>Call Chain = Task_Game &rArr; game &rArr; game1 &rArr; GameFailure &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_Play
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.Task_Start)
</UL>
<P><STRONG><a name="[84]"></a>Task_GameVoicePrompt</STRONG> (Thumb, 232 bytes, Stack size 16 bytes, app.o(i.Task_GameVoicePrompt))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = Task_GameVoicePrompt &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_Play
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.Task_Start)
</UL>
<P><STRONG><a name="[86]"></a>Task_LedControl</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app.o(i.Task_LedControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = Task_LedControl &rArr; OSQPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxStopLedControl
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxPlayLedControl
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.Task_Start)
</UL>
<P><STRONG><a name="[87]"></a>Task_Mco_Rx</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, app.o(i.Task_Mco_Rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = Task_Mco_Rx &rArr; analyzeUartPacket &rArr; ParaUpdate &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyzeUartPacket
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.Task_Start)
</UL>
<P><STRONG><a name="[7f]"></a>Task_MidiPlay</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, app.o(i.Task_MidiPlay))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = Task_MidiPlay &rArr; ReadMidiFile &rArr; ParseMIDI &rArr; f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostDeviceMsg
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMidiFile
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FIndDevice
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.Task_Start)
</UL>
<P><STRONG><a name="[82]"></a>Task_Scan</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, app.o(i.Task_Scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = Task_Scan &rArr;  Task_Scan (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_io_detect
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLightsDelay
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_disk_detect
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scan
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoPlayDelay
<LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_start_reset_key
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_midi_linghts_key
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scan
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.Task_Start)
</UL>
<P><STRONG><a name="[90]"></a>Task_Start</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, app.o(i.Task_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = Task_Start &rArr; OSTaskCreate &rArr; OS_TCBInit
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemCreate
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQCreate
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagCreate
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[85]"></a>Task_XFS5152CE_Play</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, app.o(i.Task_XFS5152CE_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = Task_XFS5152CE_Play &rArr; XFS5152CE_SendData &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagQuery
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_SendData
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemSet
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemQuery
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i.Task_Start)
</UL>
<P><STRONG><a name="[415]"></a>TimeDispatch</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, timer.o(i.TimeDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TimeDispatch
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_IRQHandler
</UL>

<P><STRONG><a name="[2ca]"></a>TxDeviceCmd</STRONG> (Thumb, 158 bytes, Stack size 48 bytes, usart1.o(i.TxDeviceCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digital_input_handler
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetCanHandle
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode5_Lights_x_1
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode5_Lights_1_x
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode4_Lights_x_1
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode4_Lights_1_x
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mode3_Lights_x_1
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lights_x_1
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lights_min_to_mid_to_max
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lights_min_form_mid_form_max
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Lights_1_x
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaUpdate
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyzeUartPacket
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceAddressUp
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Game
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameFailure
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameEnd
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_midi_linghts_key
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDev
</UL>

<P><STRONG><a name="[422]"></a>TxLedControlCmd</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, ledcontrol.o(i.TxLedControlCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = TxLedControlCmd &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxStudyCodeCommands
</UL>

<P><STRONG><a name="[41a]"></a>TxPlayLedControl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ledcontrol.o(i.TxPlayLedControl))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LedControl
</UL>

<P><STRONG><a name="[419]"></a>TxStopLedControl</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, ledcontrol.o(i.TxStopLedControl))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_LedControl
</UL>

<P><STRONG><a name="[2e5]"></a>TxStudyCodeCommands</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, ledcontrol.o(i.TxStudyCodeCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = TxStudyCodeCommands &rArr; TxLedControlCmd &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxLedControlCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuControlAddrSetUp
</UL>

<P><STRONG><a name="[2ac]"></a>UART4_Config</STRONG> (Thumb, 140 bytes, Stack size 48 bytes, uart4.o(i.UART4_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = UART4_Config &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[52]"></a>UART4_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, uart4.o(i.UART4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = UART4_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[425]"></a>UART4_NVIC_Configuration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, uart4.o(i.UART4_NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART4_NVIC_Configuration &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART4_Config
</UL>

<P><STRONG><a name="[2aa]"></a>UI_Init</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, ui.o(i.UI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UI_Init &rArr; LCD_GPIO_Configuration &rArr; set_lcd_port_out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Configuration
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Init
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GUI_Clear
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[429]"></a>USART1_Config</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, usart1.o(i.USART1_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = USART1_Config &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_NVIC_Configuration
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_Config
</UL>

<P><STRONG><a name="[43]"></a>USART1_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, usart1.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_ReturnStatus
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post_XFS5152CE_RX_Msg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[42a]"></a>USART1_NVIC_Configuration</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usart1.o(i.USART1_NVIC_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART1_NVIC_Configuration &rArr; HAL_NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>

<P><STRONG><a name="[44]"></a>USART2_IRQHandler</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, usart2.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; HAL_UART_TxCpltCallback &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[457]"></a>USBH_AllocPipe</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, usbh_pipes.o(i.USBH_AllocPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBH_AllocPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[42c]"></a>USBH_BulkReceiveData</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_BulkReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_BulkReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[42e]"></a>USBH_BulkSendData</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_BulkSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_BulkSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[42f]"></a>USBH_ClosePipe</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, usbh_pipes.o(i.USBH_ClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ClosePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
</UL>

<P><STRONG><a name="[431]"></a>USBH_ClrFeature</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_ClrFeature))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ClassRequest
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
</UL>

<P><STRONG><a name="[433]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 34 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_CtlReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_CtlReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[432]"></a>USBH_CtlReq</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, usbh_ctlreq.o(i.USBH_CtlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>
<BR>[Called By]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_Reset
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_GetMaxLUN
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>

<P><STRONG><a name="[435]"></a>USBH_CtlSendData</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[436]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 30 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_CtlSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[437]"></a>USBH_Delay</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[455]"></a>USBH_FindInterface</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_FindInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_FindInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[444]"></a>USBH_FreePipe</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, usbh_pipes.o(i.USBH_FreePipe))
<BR><BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
</UL>

<P><STRONG><a name="[438]"></a>USBH_GetDescriptor</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, usbh_ctlreq.o(i.USBH_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[462]"></a>USBH_GetNextDesc</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_GetNextDesc))
<BR><BR>[Called By]<UL><LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[439]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_Get_CfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[43b]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, usbh_ctlreq.o(i.USBH_Get_DevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[43c]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_Get_StringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[388]"></a>USBH_Init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBH_Init &rArr; USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[430]"></a>USBH_LL_ClosePipe</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_ClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
</UL>

<P><STRONG><a name="[319]"></a>USBH_LL_Connect</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_LL_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_LL_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
</UL>

<P><STRONG><a name="[31b]"></a>USBH_LL_Disconnect</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_LL_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost
</UL>
<BR>[Calls]<UL><LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
</UL>

<P><STRONG><a name="[446]"></a>USBH_LL_DriverVBUS</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_DriverVBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_LL_DriverVBUS &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
</UL>

<P><STRONG><a name="[447]"></a>USBH_LL_GetLastXferSize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_GetLastXferSize))
<BR><BR>[Calls]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_GetXferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[449]"></a>USBH_LL_GetSpeed</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_GetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_LL_GetSpeed &rArr; HAL_HCD_GetCurrentSpeed &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[450]"></a>USBH_LL_GetToggle</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_GetToggle))
<BR><BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[43d]"></a>USBH_LL_GetURBState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_GetURBState))
<BR><BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_GetURBState
</UL>
<BR>[Called By]<UL><LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[33a]"></a>USBH_LL_IncTimer</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_IncTimer))
<BR><BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
</UL>

<P><STRONG><a name="[443]"></a>USBH_LL_Init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetTimer
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[44c]"></a>USBH_LL_OpenPipe</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, usbh_conf.o(i.USBH_LL_OpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
</UL>

<P><STRONG><a name="[44d]"></a>USBH_LL_ResetPort</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_LL_ResetPort &rArr; HAL_HCD_ResetPort &rArr; USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[44b]"></a>USBH_LL_SetTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_SetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[451]"></a>USBH_LL_SetToggle</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_conf.o(i.USBH_LL_SetToggle))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[445]"></a>USBH_LL_Start</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_LL_Start &rArr; HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
</UL>

<P><STRONG><a name="[43e]"></a>USBH_LL_Stop</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_LL_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost
</UL>
<BR>[Calls]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[42d]"></a>USBH_LL_SubmitURB</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, usbh_conf.o(i.USBH_LL_SubmitURB))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
</UL>

<P><STRONG><a name="[458]"></a>USBH_MSC_BOT_Init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Init))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[44f]"></a>USBH_MSC_BOT_Process</STRONG> (Thumb, 490 bytes, Stack size 40 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkSendData
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_BulkReceiveData
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetToggle
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetToggle
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetLastXferSize
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_Reset
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Abort
</UL>
<BR>[Called By]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
</UL>

<P><STRONG><a name="[453]"></a>USBH_MSC_BOT_REQ_GetMaxLUN</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_REQ_GetMaxLUN))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_MSC_BOT_REQ_GetMaxLUN &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_ClassRequest
</UL>

<P><STRONG><a name="[452]"></a>USBH_MSC_BOT_REQ_Reset</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_REQ_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[454]"></a>USBH_MSC_GetLUNInfo</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_msc.o(i.USBH_MSC_GetLUNInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_MSC_GetLUNInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_write
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_read
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ioctl
</UL>

<P><STRONG><a name="[460]"></a>USBH_MSC_Read</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = USBH_MSC_Read &rArr; USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_read
</UL>

<P><STRONG><a name="[459]"></a>USBH_MSC_SCSI_Inquiry</STRONG> (Thumb, 196 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_Inquiry))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBH_MSC_SCSI_Inquiry &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[45e]"></a>USBH_MSC_SCSI_Read</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = USBH_MSC_SCSI_Read &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
</UL>

<P><STRONG><a name="[45b]"></a>USBH_MSC_SCSI_ReadCapacity</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_ReadCapacity))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBH_MSC_SCSI_ReadCapacity &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[45c]"></a>USBH_MSC_SCSI_RequestSense</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_RequestSense))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBH_MSC_SCSI_RequestSense &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[45a]"></a>USBH_MSC_SCSI_TestUnitReady</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_TestUnitReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBH_MSC_SCSI_TestUnitReady &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Process
</UL>

<P><STRONG><a name="[45f]"></a>USBH_MSC_SCSI_Write</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, usbh_msc_scsi.o(i.USBH_MSC_SCSI_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
</UL>

<P><STRONG><a name="[464]"></a>USBH_MSC_UnitIsReady</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_msc.o(i.USBH_MSC_UnitIsReady))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_status
</UL>

<P><STRONG><a name="[461]"></a>USBH_MSC_Write</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = USBH_MSC_Write &rArr; USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_RdWrProcess
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_write
</UL>

<P><STRONG><a name="[441]"></a>USBH_OpenPipe</STRONG> (Thumb, 20 bytes, Stack size 32 bytes, usbh_pipes.o(i.USBH_OpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_OpenPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[38c]"></a>USBH_Process</STRONG> (Thumb, 360 bytes, Stack size 32 bytes, usbh_core.o(i.USBH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ResetPort
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetSpeed
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitStateMachine
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Process
</UL>

<P><STRONG><a name="[389]"></a>USBH_RegisterClass</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_RegisterClass))
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[456]"></a>USBH_SelectInterface</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_SelectInterface))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
</UL>

<P><STRONG><a name="[440]"></a>USBH_SetAddress</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[463]"></a>USBH_SetCfg</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[38a]"></a>USBH_Start</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_Start &rArr; USBH_LL_Start &rArr; HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_DriverVBUS
</UL>
<BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[97]"></a>USBH_initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_diskio.o(i.USBH_initialize))
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[9b]"></a>USBH_ioctl</STRONG> (Thumb, 74 bytes, Stack size 64 bytes, usbh_diskio.o(i.USBH_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = USBH_ioctl &rArr; USBH_MSC_GetLUNInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetLUNInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[99]"></a>USBH_read</STRONG> (Thumb, 66 bytes, Stack size 72 bytes, usbh_diskio.o(i.USBH_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = USBH_read &rArr; USBH_MSC_Read &rArr; USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetLUNInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[98]"></a>USBH_status</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, usbh_diskio.o(i.USBH_status))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_status
</UL>
<BR>[Calls]<UL><LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_UnitIsReady
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[9a]"></a>USBH_write</STRONG> (Thumb, 74 bytes, Stack size 72 bytes, usbh_diskio.o(i.USBH_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = USBH_write &rArr; USBH_MSC_Write &rArr; USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_GetLUNInfo
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_diskio.o(.constdata)
</UL>
<P><STRONG><a name="[334]"></a>USB_CoreInit</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, stm32f2xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[332]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[466]"></a>USB_DoPing</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f2xx_ll_usb.o(i.USB_DoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>

<P><STRONG><a name="[33d]"></a>USB_DriveVbus</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f2xx_ll_usb.o(i.USB_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>

<P><STRONG><a name="[33c]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>

<P><STRONG><a name="[469]"></a>USB_FlushRxFifo</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[468]"></a>USB_FlushTxFifo</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[31d]"></a>USB_GetCurrentFrame</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_GetCurrentFrame))
<BR><BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
</UL>

<P><STRONG><a name="[31f]"></a>USB_GetHostSpeed</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f2xx_ll_usb.o(i.USB_GetHostSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_GetHostSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentSpeed
</UL>

<P><STRONG><a name="[327]"></a>USB_GetMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[321]"></a>USB_HC_Halt</STRONG> (Thumb, 378 bytes, Stack size 8 bytes, stm32f2xx_ll_usb.o(i.USB_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>

<P><STRONG><a name="[323]"></a>USB_HC_Init</STRONG> (Thumb, 230 bytes, Stack size 20 bytes, stm32f2xx_ll_usb.o(i.USB_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
</UL>

<P><STRONG><a name="[32c]"></a>USB_HC_ReadInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_HC_ReadInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[325]"></a>USB_HC_StartXfer</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, stm32f2xx_ll_usb.o(i.USB_HC_StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
</UL>

<P><STRONG><a name="[336]"></a>USB_HostInit</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, stm32f2xx_ll_usb.o(i.USB_HostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_HostInit &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriveVbus
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[329]"></a>USB_InitFSLSPClkSel</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_InitFSLSPClkSel))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[328]"></a>USB_ReadInterrupts</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[368]"></a>USB_ReadPacket</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f2xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_RXQLVL_IRQHandler
</UL>

<P><STRONG><a name="[339]"></a>USB_ResetPort</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, stm32f2xx_ll_usb.o(i.USB_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_ResetPort
</UL>

<P><STRONG><a name="[335]"></a>USB_SetCurrentMode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f2xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[33f]"></a>USB_StopHost</STRONG> (Thumb, 178 bytes, Stack size 20 bytes, stm32f2xx_ll_usb.o(i.USB_StopHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_StopHost
</UL>
<BR>[Calls]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Stop
</UL>

<P><STRONG><a name="[467]"></a>USB_WritePacket</STRONG> (Thumb, 38 bytes, Stack size 12 bytes, stm32f2xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>

<P><STRONG><a name="[46a]"></a>Uart1SendData</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usart1.o(i.Uart1SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Uart1SendData &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_SendData
</UL>

<P><STRONG><a name="[2ee]"></a>Update_Local_Timer_Text</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, setdevice.o(i.Update_Local_Timer_Text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Update_Local_Timer_Text &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerInit
</UL>

<P><STRONG><a name="[2f1]"></a>Update_T1000_Timer_Text</STRONG> (Thumb, 256 bytes, Stack size 24 bytes, setdevice.o(i.Update_T1000_Timer_Text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Update_T1000_Timer_Text &rArr; __2snprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerInit
</UL>

<P><STRONG><a name="[19]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f2xx_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f205xx.o(RESET)
</UL>
<P><STRONG><a name="[2ef]"></a>WeekToChinese</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rtc.o(i.WeekToChinese))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTop
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerInit
</UL>

<P><STRONG><a name="[2fa]"></a>WriteCommand_0108</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ks0108.o(i.WriteCommand_0108))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteCommand_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_lcd_bus
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS0108_SetStartRow
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KS0108_DisplayOn
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear
</UL>

<P><STRONG><a name="[2fb]"></a>WriteData_0108</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, ks0108.o(i.WriteData_0108))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WriteData_0108
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_lcd_bus
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DELAY
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Locate
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Display_Clear
</UL>

<P><STRONG><a name="[46b]"></a>Write_lcd_bus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ks0108_cpu.o(i.Write_lcd_bus))
<BR><BR>[Called By]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteData_0108
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WriteCommand_0108
</UL>

<P><STRONG><a name="[2ab]"></a>XFS5152CE_Config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, xfs5152ce.o(i.XFS5152CE_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = XFS5152CE_Config &rArr; USART1_Config &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[30a]"></a>XFS5152CE_Play</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, xfs5152ce.o(i.XFS5152CE_Play))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = XFS5152CE_Play &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyzeUartPacket
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_GameVoicePrompt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Game
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameFailure
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameEnd
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
</UL>

<P><STRONG><a name="[42b]"></a>XFS5152CE_ReturnStatus</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, xfs5152ce.o(i.XFS5152CE_ReturnStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 52 + Unknown Stack Size
<LI>Call Chain = XFS5152CE_ReturnStatus &rArr; OSSemPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPost
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[420]"></a>XFS5152CE_SendData</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, xfs5152ce.o(i.XFS5152CE_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = XFS5152CE_SendData &rArr; OSFlagPend &rArr; OS_FlagBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit_IT
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_XFS5152CE_Play
</UL>

<P><STRONG><a name="[5]"></a>_RxPDO_EventTimers_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pdo.o(i._RxPDO_EventTimers_Handler))
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[46d]"></a>__0snprintf$6</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, printf6.o(i.__0snprintf$6), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4d8]"></a>__1snprintf$6</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf6.o(i.__0snprintf$6), UNUSED)

<P><STRONG><a name="[2c8]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, printf6.o(i.__0snprintf$6))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTop
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuT1000_TimerInit
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleNumberInit
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleDelayTimeInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetTrampleCountTimeInit
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetSyllableDelayTimeInit
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetReturnTopTimeInit
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetNoteDelayTimeInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetMusicDelayTimeInit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetLightsDelayTimeInit
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetGamePassTimeInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetDeviceTotalInit
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuSetBeepRowNumInit
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowsDeviceNumberSetInit
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuRowNumberSetInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuNumberOfFramesSetInit
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuMaxLedNumberSetInit
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLocal_TimerInit
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLightsSpacingSetInit
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColourSetInit
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleTimeSetInit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuLedColorCycleModeSetInit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuGroupsLedNumberSetInit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuFullColorLightPatternSetInit
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuEnglishCharSetInit
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuDateSetInit
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevInit
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevFailInit
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuChinesePinyinSetInit
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN2DevicesTotalInit
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuCAN1DevicesTotalInit
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuVoicePromptTimeInit
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuTimeSetInit
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_T1000_Timer_Text
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Update_Local_Timer_Text
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDevStatus
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDev
</UL>

<P><STRONG><a name="[283]"></a>__aeabi_errno_addr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[4d9]"></a>__rt_errno_addr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, errno.o(i.__aeabi_errno_addr), UNUSED)

<P><STRONG><a name="[3f2]"></a>free</STRONG> (Thumb, 88 bytes, Stack size 12 bytes, mallocr.o(i.__free$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceDeInit
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStringAndPrint
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMidiFile
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[3ec]"></a>malloc</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, mallocr.o(i.__malloc$realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_InterfaceInit
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStringAndPrint
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMidiFile
<LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
</UL>

<P><STRONG><a name="[4da]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[4db]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[4dc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[470]"></a>_getODentry</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, objacces.o(i._getODentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digital_output_handler
</UL>

<P><STRONG><a name="[b]"></a>_heartbeatError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(i._heartbeatError))
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>_initialisation</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(i._initialisation))
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[c]"></a>_nodeguardError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(i._nodeguardError))
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>_operational</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(i._operational))
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>_post_SlaveBootup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(i._post_SlaveBootup))
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[10]"></a>_post_SlaveStateChange</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(i._post_SlaveStateChange))
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>_post_TPDO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sync.o(i._post_TPDO))
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[13]"></a>_post_emcy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emcy.o(i._post_emcy))
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>_post_sync</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sync.o(i._post_sync))
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>_preOperational</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, states.o(i._preOperational))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _preOperational &rArr; masterSendNMTstateChange &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTstateChange
</UL>
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[3d9]"></a>_sendPDOevent</STRONG> (Thumb, 286 bytes, Stack size 48 bytes, pdo.o(i._sendPDOevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
</UL>
<BR>[Called By]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPDOevent
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
</UL>

<P><STRONG><a name="[2cb]"></a>_setODentry</STRONG> (Thumb, 226 bytes, Stack size 64 bytes, objacces.o(i._setODentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _setODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_operational
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_initialisation
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDev
</UL>

<P><STRONG><a name="[a]"></a>_stopped</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(i._stopped))
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[12]"></a>_storeODSubIndex</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, objacces.o(i._storeODSubIndex))
<BR>[Address Reference Count : 1]<UL><LI> objdict.o(.data)
</UL>
<P><STRONG><a name="[476]"></a>_writeNetworkDict</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, sdo.o(i._writeNetworkDict))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _writeNetworkDict &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDOClientFromNodeId
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNetworkDict
</UL>

<P><STRONG><a name="[41b]"></a>analyzeUartPacket</STRONG> (Thumb, 464 bytes, Stack size 56 bytes, usart1.o(i.analyzeUartPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = analyzeUartPacket &rArr; ParaUpdate &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digital_output_handler
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_Play
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SlaveParaSet
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Post_GAME_RX_Msg
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParaUpdate
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagAccept
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LedColorCycleControl
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Keyboard_21key
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Mco_Rx
</UL>

<P><STRONG><a name="[474]"></a>buildPDO</STRONG> (Thumb, 228 bytes, Stack size 88 bytes, pdo.o(i.buildPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>

<P><STRONG><a name="[2bd]"></a>canDispatch</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, states.o(i.canDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedEMCY
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[2c2]"></a>canInit</STRONG> (Thumb, 364 bytes, Stack size 96 bytes, can_stm32_hal.o(i.canInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = canInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Init
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_DeInit
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_ConfigFilter
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanopenInit
</UL>

<P><STRONG><a name="[3e9]"></a>canSend</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, can_stm32_hal.o(i.canSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNCMessage
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveSendBootUp
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTnodeguard
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHeartbeatAlarm
<LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTstateChange
</UL>

<P><STRONG><a name="[496]"></a>clust2sect</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, ff.o(i.clust2sect))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[296]"></a>delay_ms</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, timr_delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = delay_ms &rArr; OSTimeDly &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDly
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_GPIO_Config
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AT24CXX_WriteOneByte
</UL>

<P><STRONG><a name="[36b]"></a>delay_us</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, timr_delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[421]"></a>digital_input_handler</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, ds401.o(i.digital_input_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
</UL>

<P><STRONG><a name="[47c]"></a>digital_output_handler</STRONG> (Thumb, 128 bytes, Stack size 56 bytes, ds401.o(i.digital_output_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = digital_output_handler &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getState
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analyzeUartPacket
</UL>

<P><STRONG><a name="[4b2]"></a>disk_initialize</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, diskio.o(i.disk_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[4c7]"></a>disk_ioctl</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, diskio.o(i.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_ioctl
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[4a1]"></a>disk_read</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[4b1]"></a>disk_status</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, diskio.o(i.disk_status))
<BR><BR>[Called By]<UL><LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[4a0]"></a>disk_write</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, diskio.o(i.disk_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
</UL>

<P><STRONG><a name="[49b]"></a>emergencyInit</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, emcy.o(i.emergencyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = emergencyInit &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[4c6]"></a>emergencyStop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emcy.o(i.emergencyStop))
<BR><BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[3e6]"></a>f_close</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, ff.o(i.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
</UL>

<P><STRONG><a name="[3e0]"></a>f_lseek</STRONG> (Thumb, 626 bytes, Stack size 40 bytes, ff.o(i.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
</UL>

<P><STRONG><a name="[3ed]"></a>f_mount</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, ff.o(i.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMidiFile
</UL>

<P><STRONG><a name="[3de]"></a>f_open</STRONG> (Thumb, 440 bytes, Stack size 616 bytes, ff.o(i.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = f_open &rArr; dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_lock
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
</UL>

<P><STRONG><a name="[3ef]"></a>f_opendir</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, ff.o(i.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inc_lock
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMidiFile
</UL>

<P><STRONG><a name="[3df]"></a>f_read</STRONG> (Thumb, 378 bytes, Stack size 40 bytes, ff.o(i.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clmt_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadStringAndPrint
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadDynamicBytes
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseMIDI
</UL>

<P><STRONG><a name="[3f0]"></a>f_readdir</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, ff.o(i.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memfree
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_memalloc
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMidiFile
</UL>

<P><STRONG><a name="[49c]"></a>f_sync</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, ff.o(i.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = f_sync &rArr; sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fattime
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[4b0]"></a>failedSDO</STRONG> (Thumb, 142 bytes, Stack size 40 bytes, sdo.o(i.failedSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = failedSDO &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[48b]"></a>ff_convert</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, unicode.o(i.ff_convert))
<BR><BR>[Called By]<UL><LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[4a5]"></a>ff_memalloc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, syscall.o(i.ff_memalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ff_memalloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4ad]"></a>ff_memfree</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, syscall.o(i.ff_memfree))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ff_memfree &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[492]"></a>ff_wtoupper</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, unicode.o(i.ff_wtoupper))
<BR><BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[418]"></a>game</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, game.o(i.game))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = game &rArr; game1 &rArr; GameFailure &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game1
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Game
</UL>

<P><STRONG><a name="[4b3]"></a>game1</STRONG> (Thumb, 1326 bytes, Stack size 104 bytes, game1.o(i.game1))
<BR><BR>[Stack]<UL><LI>Max Depth = 404 + Unknown Stack Size
<LI>Call Chain = game1 &rArr; GameFailure &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RTC_GetTime
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FindRowsDeviceId
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;XFS5152CE_Play
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTimeDlyHMSM
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
<LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrCreate
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameRankingDataSave
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameRankingCmp
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameFailure
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GameEnd
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQPend
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSQFlush
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;game
</UL>

<P><STRONG><a name="[40d]"></a>getElapsedTime</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, timer_stm32_hal.o(i.getElapsedTime))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
</UL>

<P><STRONG><a name="[4bb]"></a>getNodeId</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, states.o(i.getNodeId))
<BR><BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[479]"></a>getSDOfreeLine</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, sdo.o(i.getSDOfreeLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = getSDOfreeLine
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[478]"></a>getSDOlineOnUse</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, sdo.o(i.getSDOlineOnUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getSDOlineOnUse
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteResultNetworkDict
</UL>

<P><STRONG><a name="[4be]"></a>getSDOlineRestBytes</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sdo.o(i.getSDOlineRestBytes))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[48f]"></a>getState</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, states.o(i.getState))
<BR><BR>[Called By]<UL><LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digital_output_handler
</UL>

<P><STRONG><a name="[2d1]"></a>getWriteResultNetworkDict</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, sdo.o(i.getWriteResultNetworkDict))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = getWriteResultNetworkDict &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDOClientFromNodeId
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDevTimeOut
</UL>

<P><STRONG><a name="[488]"></a>get_fat</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, ff.o(i.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[4a8]"></a>get_fattime</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fatfs.o(i.get_fattime))
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4b4]"></a>get_io_key_val</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, key_cpu.o(i.get_io_key_val))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = get_io_key_val
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_scan
</UL>

<P><STRONG><a name="[41e]"></a>get_midi_linghts_key</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, key.o(i.get_midi_linghts_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = get_midi_linghts_key &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxDeviceCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scan
</UL>

<P><STRONG><a name="[41f]"></a>get_start_reset_key</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, key.o(i.get_start_reset_key))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = get_start_reset_key &rArr; OSFlagPost &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_ReadPin
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scan
</UL>

<P><STRONG><a name="[3d3]"></a>heartbeatInit</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, lifegrd.o(i.heartbeatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = heartbeatInit &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
</UL>

<P><STRONG><a name="[3d2]"></a>heartbeatStop</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lifegrd.o(i.heartbeatStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = heartbeatStop
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
</UL>

<P><STRONG><a name="[47a]"></a>initSDOline</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, sdo.o(i.initSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = initSDOline &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>

<P><STRONG><a name="[2be]"></a>initTimer</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, timer_stm32_hal.o(i.initTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = initTimer &rArr; TIM4_start &rArr; TIM4_Configuration &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_start
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanopenInit
</UL>

<P><STRONG><a name="[4b5]"></a>insert_sd</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mmc_sd.o(i.insert_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = insert_sd &rArr; PostDeviceMsg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostDeviceMsg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_io_detect
</UL>

<P><STRONG><a name="[4b6]"></a>insert_u_disk</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, mmc_sd.o(i.insert_u_disk))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = insert_u_disk &rArr; PostDeviceMsg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_LinkDriver
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostDeviceMsg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_disk_detect
</UL>

<P><STRONG><a name="[370]"></a>io_key_GPIO_Configuration</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, key_cpu.o(i.io_key_GPIO_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = io_key_GPIO_Configuration &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[2c4]"></a>key_scan</STRONG> (Thumb, 190 bytes, Stack size 16 bytes, key.o(i.key_scan))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = key_scan &rArr; get_io_key_val
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_io_key_val
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Key_Type_Change
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckKey
</UL>

<P><STRONG><a name="[4b8]"></a>lifeGuardInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lifegrd.o(i.lifeGuardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lifeGuardInit &rArr; heartbeatInit &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[4b9]"></a>lifeGuardStop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lifegrd.o(i.lifeGuardStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lifeGuardStop &rArr; heartbeatStop
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardStop
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[29c]"></a>lights_colour_select</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, lights.o(i.lights_colour_select))
<BR><BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode5
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode4
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AutoLightsDelay
</UL>

<P><STRONG><a name="[417]"></a>lights_control</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, lights.o(i.lights_control))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = lights_control &rArr; LightsMode5 &rArr; Mode5_Lights_x_1 &rArr; TxDeviceCmd &rArr; digital_input_handler &rArr; sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode5
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode4
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode3
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode2
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LightsMode1
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_AutoLighits
</UL>

<P><STRONG><a name="[4bf]"></a>lineToSDO</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, sdo.o(i.lineToSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lineToSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[6b]"></a>main</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = main &rArr; BSP_Init &rArr; CanopenInit &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTaskCreate
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Init
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[30f]"></a>masterSendNMTnodeguard</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, nmtmaster.o(i.masterSendNMTnodeguard))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = masterSendNMTnodeguard &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuardTimeAlarm
</UL>

<P><STRONG><a name="[390]"></a>masterSendNMTstateChange</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, nmtmaster.o(i.masterSendNMTstateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = masterSendNMTstateChange &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_preOperational
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_post_SlaveBootup
</UL>

<P><STRONG><a name="[371]"></a>midi_linghts_key_init</STRONG> (Thumb, 88 bytes, Stack size 40 bytes, key.o(i.midi_linghts_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = midi_linghts_key_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[3d5]"></a>nodeguardInit</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lifegrd.o(i.nodeguardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = nodeguardInit &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNodeGuardUpdate
</UL>

<P><STRONG><a name="[3d4]"></a>nodeguardStop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lifegrd.o(i.nodeguardStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nodeguardStop
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNodeGuardUpdate
</UL>

<P><STRONG><a name="[4ba]"></a>objdictToSDOline</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, sdo.o(i.objdictToSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = objdictToSDOline &rArr; _getODentry
</UL>
<BR>[Calls]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[47e]"></a>proceedEMCY</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, emcy.o(i.proceedEMCY))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = proceedEMCY
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[483]"></a>proceedNMTstateChange</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, nmtslave.o(i.proceedNMTstateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNodeId
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNodeId
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[482]"></a>proceedNODE_GUARD</STRONG> (Thumb, 244 bytes, Stack size 40 bytes, lifegrd.o(i.proceedNODE_GUARD))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = proceedNODE_GUARD &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[480]"></a>proceedPDO</STRONG> (Thumb, 550 bytes, Stack size 72 bytes, pdo.o(i.proceedPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = proceedPDO &rArr; PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[481]"></a>proceedSDO</STRONG> (Thumb, 5708 bytes, Stack size 88 bytes, sdo.o(i.proceedSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = proceedSDO &rArr; failedSDO &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSDOlineRestBytes
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineToSDO
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineRestBytes
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOtoLine
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[47f]"></a>proceedSYNC</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, sync.o(i.proceedSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[489]"></a>put_fat</STRONG> (Thumb, 248 bytes, Stack size 32 bytes, ff.o(i.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>

<P><STRONG><a name="[3ee]"></a>realloc</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, mallocr.o(i.realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = realloc &rArr; malloc &rArr; internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReadMidiFile
</UL>

<P><STRONG><a name="[4c0]"></a>remove_sd</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mmc_sd.o(i.remove_sd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = remove_sd &rArr; PostDeviceMsg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_UnLinkDriver
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostDeviceMsg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdmmc_io_detect
</UL>

<P><STRONG><a name="[4c1]"></a>remove_u_disk</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, mmc_sd.o(i.remove_u_disk))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = remove_u_disk &rArr; PostDeviceMsg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FATFS_UnLinkDriver
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PostDeviceMsg
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>
<BR>[Called By]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;u_disk_detect
</UL>

<P><STRONG><a name="[4c2]"></a>resetSDO</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sdo.o(i.resetSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = resetSDO &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[2e2]"></a>resetSDOline</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sdo.o(i.resetSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = resetSDOline &rArr; initSDOline &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispMenuConfig_M_DevUp
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getWriteResultNetworkDict
</UL>

<P><STRONG><a name="[3d8]"></a>scanIndexOD</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, objacces.o(i.scanIndexOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = scanIndexOD
</UL>
<BR>[Called By]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>

<P><STRONG><a name="[2a8]"></a>sd_detect_gpio_confing</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, mmc_sd.o(i.sd_detect_gpio_confing))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sd_detect_gpio_confing &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_Init
</UL>

<P><STRONG><a name="[41d]"></a>sdmmc_io_detect</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, mmc_sd.o(i.sdmmc_io_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = sdmmc_io_detect &rArr; remove_sd &rArr; PostDeviceMsg &rArr; OSQPost &rArr; OS_EventTaskRdy &rArr; OS_EventTaskRemove
</UL>
<BR>[Calls]<UL><LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_sd
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_sd
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scan
</UL>

<P><STRONG><a name="[3d6]"></a>sendOnePDOevent</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, pdo.o(i.sendOnePDOevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInhibitTimerAlarm
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
</UL>

<P><STRONG><a name="[48e]"></a>sendPDOevent</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pdo.o(i.sendPDOevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = sendPDOevent &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digital_input_handler
</UL>

<P><STRONG><a name="[47b]"></a>sendSDO</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sdo.o(i.sendSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = sendSDO &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[3f4]"></a>sendSDOabort</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, sdo.o(i.sendSDOabort))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
</UL>

<P><STRONG><a name="[40f]"></a>sendSYNC</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sync.o(i.sendSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = sendSYNC &rArr; proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNCMessage
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncAlarm
</UL>

<P><STRONG><a name="[4c3]"></a>sendSYNCMessage</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, sync.o(i.sendSYNCMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = sendSYNCMessage &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
</UL>

<P><STRONG><a name="[2c1]"></a>setNodeId</STRONG> (Thumb, 306 bytes, Stack size 48 bytes, states.o(i.setNodeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = setNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanopenInit
</UL>

<P><STRONG><a name="[4bd]"></a>setSDOlineRestBytes</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sdo.o(i.setSDOlineRestBytes))
<BR><BR>[Called By]<UL><LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[2c0]"></a>setState</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, states.o(i.setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CanopenInit
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_post_SlaveStateChange
</UL>

<P><STRONG><a name="[38f]"></a>setTimer</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, timer_stm32_hal.o(i.setTimer))
<BR><BR>[Called By]<UL><LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_operational
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
</UL>

<P><STRONG><a name="[36d]"></a>set_iic_sda_in</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, iic_cpu.o(i.set_iic_sda_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = set_iic_sda_in &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Wait_Ack
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Read_Byte
</UL>

<P><STRONG><a name="[36a]"></a>set_iic_sda_out</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, iic_cpu.o(i.set_iic_sda_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = set_iic_sda_out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_NAck
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Ack
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Stop
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Start
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IIC_Send_Byte
</UL>

<P><STRONG><a name="[376]"></a>set_lcd_port_out</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, ks0108_cpu.o(i.set_lcd_port_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = set_lcd_port_out &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_GPIO_Configuration
</UL>

<P><STRONG><a name="[4c5]"></a>slaveSendBootUp</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, nmtslave.o(i.slaveSendBootUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = slaveSendBootUp &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[38e]"></a>startSYNC</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, sync.o(i.startSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = startSYNC &rArr; stopSYNC &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCOB_ID_SyncUpdate
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_operational
</UL>

<P><STRONG><a name="[372]"></a>start_reset_key_init</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, key.o(i.start_reset_key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = start_reset_key_init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KEY_Init
</UL>

<P><STRONG><a name="[38d]"></a>stopSYNC</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sync.o(i.stopSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = stopSYNC &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Master_operational
</UL>

<P><STRONG><a name="[4c4]"></a>switchCommunicationState</STRONG> (Thumb, 234 bytes, Stack size 24 bytes, states.o(i.switchCommunicationState))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; CopyBits
</UL>
<BR>[Calls]<UL><LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveSendBootUp
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyStop
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
</UL>

<P><STRONG><a name="[41c]"></a>u_disk_detect</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, app.o(i.u_disk_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 316 + Unknown Stack Size
<LI>Call Chain = u_disk_detect &rArr; MX_USB_HOST_Process &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Process
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_u_disk
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_u_disk
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Task_Scan
</UL>

<P><STRONG><a name="[2cc]"></a>writeNetworkDict</STRONG> (Thumb, 36 bytes, Stack size 48 bytes, sdo.o(i.writeNetworkDict))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = writeNetworkDict &rArr; _writeNetworkDict &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm
</UL>
<BR>[Calls]<UL><LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConfigDev
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[485]"></a>check_fs</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, ff.o(i.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[48c]"></a>chk_chr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.chk_chr))
<BR><BR>[Called By]<UL><LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[4a7]"></a>chk_lock</STRONG> (Thumb, 102 bytes, Stack size 20 bytes, ff.o(i.chk_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = chk_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4a3]"></a>clear_lock</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, ff.o(i.clear_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clear_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[49f]"></a>clmt_clust</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ff.o(i.clmt_clust))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
</UL>

<P><STRONG><a name="[487]"></a>create_chain</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(i.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[48a]"></a>create_name</STRONG> (Thumb, 520 bytes, Stack size 40 bytes, ff.o(i.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = create_name
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[49e]"></a>dec_lock</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, ff.o(i.dec_lock))
<BR><BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[490]"></a>dir_find</STRONG> (Thumb, 316 bytes, Stack size 40 bytes, ff.o(i.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_wtoupper
<LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[494]"></a>dir_next</STRONG> (Thumb, 284 bytes, Stack size 24 bytes, ff.o(i.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[497]"></a>dir_read</STRONG> (Thumb, 260 bytes, Stack size 48 bytes, ff.o(i.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[498]"></a>dir_register</STRONG> (Thumb, 454 bytes, Stack size 56 bytes, ff.o(i.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = dir_register &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sum_sfn
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[491]"></a>dir_sdi</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, ff.o(i.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[4a4]"></a>find_volume</STRONG> (Thumb, 590 bytes, Stack size 48 bytes, ff.o(i.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_initialize
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_lock
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[4a6]"></a>follow_path</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, ff.o(i.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[49a]"></a>gen_numname</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ff.o(i.gen_numname))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = gen_numname
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[4ae]"></a>get_fileinfo</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, ff.o(i.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_fileinfo
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ff_convert
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[4a2]"></a>get_ldnumber</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, ff.o(i.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[4ac]"></a>inc_lock</STRONG> (Thumb, 154 bytes, Stack size 20 bytes, ff.o(i.inc_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = inc_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4a9]"></a>ld_clust</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ff.o(i.ld_clust))
<BR><BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[499]"></a>mem_cpy</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.mem_cpy))
<BR><BR>[Called By]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gen_numname
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[48d]"></a>mem_set</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ff.o(i.mem_set))
<BR><BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[486]"></a>move_window</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, ff.o(i.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_read
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
</UL>

<P><STRONG><a name="[4ab]"></a>remove_chain</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, ff.o(i.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[4aa]"></a>st_clust</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ff.o(i.st_clust))
<BR><BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[493]"></a>sum_sfn</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ff.o(i.sum_sfn))
<BR><BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[4af]"></a>sync_fs</STRONG> (Thumb, 182 bytes, Stack size 16 bytes, ff.o(i.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sync_fs &rArr; sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
</UL>

<P><STRONG><a name="[495]"></a>sync_window</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(i.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = sync_window &rArr; disk_write
</UL>
<BR>[Calls]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_write
</UL>
<BR>[Called By]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
</UL>

<P><STRONG><a name="[49d]"></a>validate</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, ff.o(i.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = validate
</UL>
<BR>[Calls]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_status
</UL>
<BR>[Called By]<UL><LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[344]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f2xx_hal_cortex.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[32d]"></a>HCD_HC_IN_IRQHandler</STRONG> (Thumb, 562 bytes, Stack size 40 bytes, stm32f2xx_hal_hcd.o(i.HCD_HC_IN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HCD_HC_IN_IRQHandler &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[32e]"></a>HCD_HC_OUT_IRQHandler</STRONG> (Thumb, 556 bytes, Stack size 32 bytes, stm32f2xx_hal_hcd.o(i.HCD_HC_OUT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HCD_HC_OUT_IRQHandler &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[32a]"></a>HCD_Port_IRQHandler</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, stm32f2xx_hal_hcd.o(i.HCD_Port_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCD_Port_IRQHandler &rArr; HAL_HCD_Connect_Callback &rArr; USBH_LL_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[32f]"></a>HCD_RXQLVL_IRQHandler</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f2xx_hal_hcd.o(i.HCD_RXQLVL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCD_RXQLVL_IRQHandler &rArr; USB_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[353]"></a>SPI_CheckFlag_BSY</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, stm32f2xx_hal_spi.o(i.SPI_CheckFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SPI_CheckFlag_BSY &rArr; SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
</UL>

<P><STRONG><a name="[352]"></a>SPI_WaitFlagStateUntilTimeout</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, stm32f2xx_hal_spi.o(i.SPI_WaitFlagStateUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SPI_WaitFlagStateUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SPI_TransmitReceive
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_CheckFlag_BSY
</UL>

<P><STRONG><a name="[79]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, stm32f2xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f2xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[35c]"></a>UART_EndRxTransfer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[35b]"></a>UART_Receive_IT</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, stm32f2xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[363]"></a>UART_SetConfig</STRONG> (Thumb, 676 bytes, Stack size 24 bytes, stm32f2xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[35f]"></a>UART_Transmit_IT</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, stm32f2xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[366]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, stm32f2xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[465]"></a>USB_CoreReset</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f2xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Called By]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[7a]"></a>USBH_UserProcess</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, usb_host.o(i.USBH_UserProcess))
<BR>[Address Reference Count : 1]<UL><LI> usb_host.o(i.MX_USB_HOST_Init)
</UL>
<P><STRONG><a name="[2]"></a>USBH_MSC_ClassRequest</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, usbh_msc.o(i.USBH_MSC_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBH_MSC_ClassRequest &rArr; USBH_MSC_BOT_REQ_GetMaxLUN &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_REQ_GetMaxLUN
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>USBH_MSC_InterfaceDeInit</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, usbh_msc.o(i.USBH_MSC_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_MSC_InterfaceDeInit &rArr; USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBH_MSC_InterfaceInit</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = USBH_MSC_InterfaceInit &rArr; USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetToggle
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SelectInterface
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Init
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FindInterface
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBH_MSC_Process</STRONG> (Thumb, 656 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = USBH_MSC_Process &rArr; USBH_MSC_SCSI_TestUnitReady &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_TestUnitReady
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_ReadCapacity
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Inquiry
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[45d]"></a>USBH_MSC_RdWrProcess</STRONG> (Thumb, 140 bytes, Stack size 32 bytes, usbh_msc.o(i.USBH_MSC_RdWrProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = USBH_MSC_RdWrProcess &rArr; USBH_MSC_SCSI_Write &rArr; USBH_MSC_BOT_Process &rArr; USBH_MSC_BOT_REQ_Reset &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Write
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_RequestSense
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_SCSI_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Write
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_Read
</UL>

<P><STRONG><a name="[4]"></a>USBH_MSC_SOFProcess</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, usbh_msc.o(i.USBH_MSC_SOFProcess))
<BR>[Address Reference Count : 1]<UL><LI> usbh_msc.o(.data)
</UL>
<P><STRONG><a name="[442]"></a>DeInitStateMachine</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, usbh_core.o(i.DeInitStateMachine))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DeInitStateMachine
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[43f]"></a>USBH_HandleEnum</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, usbh_core.o(i.USBH_HandleEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
<LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[44e]"></a>USBH_MSC_BOT_Abort</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_msc_bot.o(i.USBH_MSC_BOT_Abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = USBH_MSC_BOT_Abort &rArr; USBH_ClrFeature &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClrFeature
</UL>
<BR>[Called By]<UL><LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_MSC_BOT_Process
</UL>

<P><STRONG><a name="[434]"></a>USBH_HandleControl</STRONG> (Thumb, 382 bytes, Stack size 40 bytes, usbh_ctlreq.o(i.USBH_HandleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
</UL>
<BR>[Called By]<UL><LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[43a]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 232 bytes, Stack size 28 bytes, usbh_ctlreq.o(i.USBH_ParseCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USBH_ParseCfgDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[39f]"></a>OS_InitTCBList</STRONG> (Thumb, 96 bytes, Stack size 4 bytes, os_core.o(i.OS_InitTCBList))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OS_InitTCBList
</UL>
<BR>[Calls]<UL><LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MemClr
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSInit
</UL>

<P><STRONG><a name="[3a8]"></a>OS_SchedNew</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, os_core.o(i.OS_SchedNew))
<BR><BR>[Called By]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSIntExit
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSStart
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sched
</UL>

<P><STRONG><a name="[399]"></a>OS_FlagBlock</STRONG> (Thumb, 86 bytes, Stack size 20 bytes, os_flag.o(i.OS_FlagBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OS_FlagBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPend
</UL>

<P><STRONG><a name="[39c]"></a>OS_FlagTaskRdy</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, os_flag.o(i.OS_FlagTaskRdy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_FlagTaskRdy
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_FlagUnlink
</UL>
<BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSFlagPost
</UL>

<P><STRONG><a name="[3ce]"></a>OSTmr_Link</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, os_tmr.o(i.OSTmr_Link))
<BR><BR>[Called By]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[7d]"></a>OSTmr_Task</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Task))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = OSTmr_Task &rArr; OSSemPend &rArr; OS_Sched
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Unlink
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Link
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSemPend
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedUnlock
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSSchedLock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> os_tmr.o(i.OSTmr_Init)
</UL>
<P><STRONG><a name="[3cd]"></a>OSTmr_Unlink</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, os_tmr.o(i.OSTmr_Unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OSTmr_Unlink
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStop
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmrStart
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OSTmr_Task
</UL>

<P><STRONG><a name="[475]"></a>sendPdo</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pdo.o(i.sendPdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sendPdo &rArr; canSend &rArr; HAL_CAN_Transmit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>

<P><STRONG><a name="[414]"></a>TIM4_Configuration</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, timer_stm32_hal.o(i.TIM4_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TIM4_Configuration &rArr; HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM4_start
</UL>

<P><STRONG><a name="[46e]"></a>_printf_core</STRONG> (Thumb, 748 bytes, Stack size 96 bytes, printf6.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf$6
</UL>

<P><STRONG><a name="[473]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf6.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[471]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf6.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[89]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printf6.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printf6.o(i.__0snprintf$6)
</UL>
<P><STRONG><a name="[46f]"></a>internal_alloc</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, mallocr.o(i.internal_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = internal_alloc
</UL>
<BR>[Calls]<UL><LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
